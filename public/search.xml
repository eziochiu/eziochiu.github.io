<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AutoreleasePool源码分析</title>
    <url>/2018/03/15/AutoreleasePool%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>AutoreleasePool（自动释放池）是OC中的一种内存自动回收机制，它可以延迟加入AutoreleasePool中的变量release的时机。在正常情况下，创建的变量会在超出其作用域的时候release，但是如果将变量加入AutoreleasePool，那么release将延迟执行。</p>
</blockquote>
<span id="more"></span>

<p>需要了解AutoreleasePool的工作原理，我们需要知道它的底层到底做了什么事情，那我们就先从汇编代码入手，新建一个命令行工程，创建一个新的对象继承自NSObject：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;object.h&quot;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        object *oc = [[object alloc] init]];</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们利用命令将OC代码重写为c++代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m</span><br></pre></td></tr></table></figure>

<p>我们可以大约得到3万2千行的c++代码的cpp文件，但是不要紧，因为最终的核心代码在该cpp的最底部：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    /* @autoreleasepool */ &#123; __AtAutoreleasePool __autoreleasepool; </span><br><span class="line"></span><br><span class="line">        object *o1 = ((object *(*)(id, SEL))(void *)objc_msgSend)((id)((object *(*)(id, SEL))(void *)objc_msgSend)((id)((object *(*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass(&quot;object&quot;), sel_registerName(&quot;alloc&quot;)), sel_registerName(&quot;init&quot;)), sel_registerName(&quot;autorelease&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>中间的代码层是object对象的创建过程，发送objc_msgSend消息创建对象。那其实最核心的代码就在下面这这两句上了</p>
<blockquote>
<p>__AtAutoreleasePool __autoreleasepool; </p>
</blockquote>
<h1 id="AtAutoreleasePool"><a href="#AtAutoreleasePool" class="headerlink" title="__AtAutoreleasePool"></a>__AtAutoreleasePool</h1><p>我们在cpp文件中搜索__AtAutoreleasePool会找到如下代码,__AtAutoreleasePool具体定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extern &quot;C&quot; __declspec(dllimport) void * objc_autoreleasePoolPush(void);</span><br><span class="line">extern &quot;C&quot; __declspec(dllimport) void objc_autoreleasePoolPop(void *);</span><br><span class="line"></span><br><span class="line">struct __AtAutoreleasePool &#123;</span><br><span class="line">  __AtAutoreleasePool() &#123; // 构造函数，在创建结构体的时候调用</span><br><span class="line">      atautoreleasepoolobj = objc_autoreleasePoolPush();</span><br><span class="line">  &#125;</span><br><span class="line">  ~__AtAutoreleasePool() &#123; // 析构函数，在结构体销毁的时候调用</span><br><span class="line">    objc_autoreleasePoolPop(atautoreleasepoolobj);</span><br><span class="line">  &#125;</span><br><span class="line">  void * atautoreleasepoolobj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上面两个调用，分别是构造函数和析构函数，根据构造函数和析构函数的特点：自动局部变量的构造函数是在程序执行到声明这个对象的位置时调用的，而对应的析构函数是在程序执行到离开这个对象的作用域时调用。苹果实际上是通过声明一个__AtAutoreleasePool类型的局部变量__autoreleasepool实现了@autoreleasepool{},那么实际上单个自动释放池的执行过程就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">objc_autoreleasePoolPush() —&gt; [object autorelease] —&gt; objc_autoreleasePoolPop(void *)</span><br></pre></td></tr></table></figure>


<p>想了解objc_autoreleasePoolPush和objc_autoreleasePoolPop具体都做了些什么，其实很简单，我们只要到runtime-&gt;NSObject.mm的源码中就能窥探它的真是面目了，这里我们分析的runtime源码是objc-750的版本。<br>在源码中我们可以发现这样一段代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void *objc_autoreleasePoolPush(void) &#123;</span><br><span class="line">    return AutoreleasePoolPage::push();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void objc_autoreleasePoolPop(void *ctxt) &#123;</span><br><span class="line">    AutoreleasePoolPage::pop(ctxt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>objc_autoreleasePoolPush和objc_autoreleasePoolPop分别是由AutoreleasePoolPage调用了push方法入栈和pop方法出栈，其本质实际上是AutoreleasePoolPage对应的静态方法push和pop的封装。那么问题就显而易见了，如果要知道这个push和pop方法到底做了什么，我们还得从源码里获取到AutoreleasePoolPage相关的内容以及其实现原理。</p>
<h1 id="AutoreleasePoolPage定义"><a href="#AutoreleasePoolPage定义" class="headerlink" title="AutoreleasePoolPage定义"></a>AutoreleasePoolPage定义</h1><p>在runtime源码中对AutoreleasePoolPage的定义是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class AutoreleasePoolPage  &#123;</span><br><span class="line">    // EMPTY_POOL_PLACEHOLDER is stored in TLS when exactly one pool is </span><br><span class="line">    // pushed and it has never contained any objects. This saves memory </span><br><span class="line">    // when the top level (i.e. libdispatch) pushes and pops pools but </span><br><span class="line">    // never uses them.</span><br><span class="line">#   define EMPTY_POOL_PLACEHOLDER ((id*)1)</span><br><span class="line"></span><br><span class="line">#   define POOL_BOUNDARY nil</span><br><span class="line">    static pthread_key_t const key = AUTORELEASE_POOL_KEY;</span><br><span class="line">    static uint8_t const SCRIBBLE = 0xA3;  // 0xA3A3A3A3 after releasing</span><br><span class="line">    static size_t const SIZE = </span><br><span class="line">#if PROTECT_AUTORELEASEPOOL</span><br><span class="line">        PAGE_MAX_SIZE;  // must be multiple of vm page size</span><br><span class="line">#else</span><br><span class="line">        PAGE_MAX_SIZE;  // size and alignment, power of 2</span><br><span class="line">#endif</span><br><span class="line">    static size_t const COUNT = SIZE / sizeof(id);</span><br><span class="line"></span><br><span class="line">    magic_t const magic;</span><br><span class="line">    id *next;</span><br><span class="line">    pthread_t const thread;</span><br><span class="line">    AutoreleasePoolPage * const parent;</span><br><span class="line">    AutoreleasePoolPage *child;</span><br><span class="line">    uint32_t const depth;</span><br><span class="line">    uint32_t hiwat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>去除那些静态成员变量,AutoreleasePoolPage的成员变量的解释如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class AutoreleasePoolPage  &#123;</span><br><span class="line">    magic_t const magic; //检查校验完整性的变量</span><br><span class="line">    id *next; //指向新添加到AutoreleasePoolPage的对象</span><br><span class="line">    pthread_t const thread; //AutoreleasePoolPage当前所在的线程，AutoreleasePool是按线程一一对应的（结构中的thread指针指向当前线程）</span><br><span class="line">    AutoreleasePoolPage * const parent; //指向上一个AutoreleasePoolPage</span><br><span class="line">    AutoreleasePoolPage *child; //指向下一个AutoreleasePoolPage</span><br><span class="line">    uint32_t const depth; //depth 链表的深度，节点个数</span><br><span class="line">    uint32_t hiwat; //数据容纳的一个上限</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里需要注意的是AutoreleasePoolPage有一个成员变量是PAGE_MAX_SIZE，这个表示一个AutoreleasePoolPage最大内存大小，这个宏其实在上面可以找得到，也就是说一个AutoreleasePoolPage的最大内存大小是PAGE_MAX_SIZE（也就是4096）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define I386_PGBYTES        4096        /* bytes per 80386 page */</span><br><span class="line">#define I386_PGSHIFT        12      /* bitshift for pages */</span><br><span class="line"></span><br><span class="line">#define PAGE_SIZE       I386_PGBYTES</span><br><span class="line">#define PAGE_SHIFT      I386_PGSHIFT</span><br><span class="line">#define PAGE_MASK       (PAGE_SIZE - 1)</span><br><span class="line"></span><br><span class="line">#define PAGE_MAX_SHIFT          PAGE_SHIFT</span><br><span class="line">#define PAGE_MAX_SIZE           PAGE_SIZE</span><br><span class="line">#define PAGE_MAX_MASK           PAGE_MASK</span><br><span class="line"></span><br><span class="line">#define PAGE_MIN_SHIFT          PAGE_SHIFT</span><br><span class="line">#define PAGE_MIN_SIZE           PAGE_SIZE</span><br><span class="line">#define PAGE_MIN_MASK           PAGE_MASK</span><br></pre></td></tr></table></figure>
<h1 id="AutoreleasePoolPage工作原理"><a href="#AutoreleasePoolPage工作原理" class="headerlink" title="AutoreleasePoolPage工作原理"></a>AutoreleasePoolPage工作原理</h1><p>每个AutoreleasePoolPage对象的内存大小事4096字节，除去AutoreleasePoolPage的成员变量所占用的空间，剩下的空间用来存放Autorelease对象的地址，知道了AutoreleasePoolPage的定义，现在我们回到objc_autoreleasePoolPush这个方法，我们发现了，实际上这个方法是调用了AutoreleasePoolPage的push方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static inline void *push() &#123;</span><br><span class="line">    id *dest;</span><br><span class="line">    if (DebugPoolAllocation) &#123;</span><br><span class="line">        // Each autorelease pool starts on a new pool page.</span><br><span class="line">        dest = autoreleaseNewPage(POOL_BOUNDARY);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        dest = autoreleaseFast(POOL_BOUNDARY);</span><br><span class="line">    &#125;</span><br><span class="line">    assert(dest == EMPTY_POOL_PLACEHOLDER || *dest == POOL_BOUNDARY);</span><br><span class="line">    return dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>细心的你肯定会发现，在调用push方法的时候autoreleaseFast会将一个POOL_BOUNDARY的对象放在临界点上。POOL_BOUNDARY这个对象属于比较关键的对象，关系到AutoreleasePoolPage的释放过程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static inline id *autoreleaseFast(id obj) &#123;</span><br><span class="line">    AutoreleasePoolPage *page = hotPage();</span><br><span class="line">    if (page &amp;&amp; !page-&gt;full()) &#123;</span><br><span class="line">        return page-&gt;add(obj);</span><br><span class="line">    &#125; else if (page) &#123;</span><br><span class="line">        return autoreleaseFullPage(obj, page);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return autoreleaseNoPage(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述方法分三种情况选择不同的代码执行：</p>
<p>1、有 hotPage 并且当前 page 不满，调用 page-&gt;add(obj) 方法将对象添加至 AutoreleasePoolPage 的栈中<br>2、有 hotPage 并且当前 page 已满，调用 autoreleaseFullPage 初始化一个新的页，调用 page-&gt;add(obj) 方法将对象添加至 AutoreleasePoolPage 的栈中<br>3、无 hotPage，调用 autoreleaseNoPage 创建一个 hotPage，调用 page-&gt;add(obj) 方法将对象添加至 AutoreleasePoolPage 的栈中</p>
<p>最后的都会调用 page-&gt;add(obj) 将对象添加到自动释放池中。而hotPage 可以理解为当前正在使用的 AutoreleasePoolPage。</p>
<p>接下来我们看一看objc_autoreleasePoolPop方法调用pop的实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static inline void pop(void *token) &#123;</span><br><span class="line">    AutoreleasePoolPage *page;</span><br><span class="line">    id *stop;</span><br><span class="line"></span><br><span class="line">    if (token == (void*)EMPTY_POOL_PLACEHOLDER) &#123;</span><br><span class="line">        // Popping the top-level placeholder pool.</span><br><span class="line">        if (hotPage()) &#123;</span><br><span class="line">            // Pool was used. Pop its contents normally.</span><br><span class="line">            // Pool pages remain allocated for re-use as usual.</span><br><span class="line">            pop(coldPage()-&gt;begin());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // Pool was never used. Clear the placeholder.</span><br><span class="line">            setHotPage(nil);</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    page = pageForPointer(token);</span><br><span class="line">    stop = (id *)token;</span><br><span class="line">    if (*stop != POOL_BOUNDARY) &#123;</span><br><span class="line">        if (stop == page-&gt;begin()  &amp;&amp;  !page-&gt;parent) &#123;</span><br><span class="line">            // Start of coldest page may correctly not be POOL_BOUNDARY:</span><br><span class="line">            // 1. top-level pool is popped, leaving the cold page in place</span><br><span class="line">            // 2. an object is autoreleased with no pool</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // Error. For bincompat purposes this is not </span><br><span class="line">            // fatal in executables built with old SDKs.</span><br><span class="line">            return badPop(token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (PrintPoolHiwat) printHiwat();</span><br><span class="line"></span><br><span class="line">    page-&gt;releaseUntil(stop);</span><br><span class="line"></span><br><span class="line">    // memory: delete empty children</span><br><span class="line">    if (DebugPoolAllocation  &amp;&amp;  page-&gt;empty()) &#123;</span><br><span class="line">        // special case: delete everything during page-per-pool debugging</span><br><span class="line">        AutoreleasePoolPage *parent = page-&gt;parent;</span><br><span class="line">        page-&gt;kill();</span><br><span class="line">        setHotPage(parent);</span><br><span class="line">    &#125; else if (DebugMissingPools  &amp;&amp;  page-&gt;empty()  &amp;&amp;  !page-&gt;parent) &#123;</span><br><span class="line">        // special case: delete everything for pop(top) </span><br><span class="line">        // when debugging missing autorelease pools</span><br><span class="line">        page-&gt;kill();</span><br><span class="line">        setHotPage(nil);</span><br><span class="line">    &#125; </span><br><span class="line">    else if (page-&gt;child) &#123;</span><br><span class="line">        // hysteresis: keep one empty child if page is more than half full</span><br><span class="line">        if (page-&gt;lessThanHalfFull()) &#123;</span><br><span class="line">            page-&gt;child-&gt;kill();</span><br><span class="line">        &#125;</span><br><span class="line">        else if (page-&gt;child-&gt;child) &#123;</span><br><span class="line">            page-&gt;child-&gt;child-&gt;kill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>顺着源码一步一步找就会发现，autorelease函数和push函数一样，关键代码都是调用autoreleaseFast函数向自动释放池的链表栈中添加一个对象，不过push函数的入栈的是一个边界对象，而autorelease函数入栈的是需要加入autoreleasepool的对象。自动释放池释放是传入 push 返回的边界对象（POOL_BOUNDARY）,autoreleasepool在调用autorelease时逐渐kill存在在autoreleasepool中的对象的地址，直到找到POOL_BOUNDARY对象所在的地址才会停止。</p>
<p>那么这就衍生了一个问题，如果AutoreleasePoolPage在添加需要释放的对象的地址超过了4096的空间或者是说有多个AutoreleasePoolPage的时候它是如何存入需要释放对象的地址，又是如何一层一层的释放的呢？</p>
<h1 id="AutoreleasePoolPage双向链表"><a href="#AutoreleasePoolPage双向链表" class="headerlink" title="AutoreleasePoolPage双向链表"></a>AutoreleasePoolPage双向链表</h1><p>其实AutoreleasePoolPage并没有单独的结构，而是由若干个AutoreleasePoolPage以双向链表的形式组合而成的栈结构在AutoreleasePoolPage的成员变量内部，我们可以清晰的看到有两个成员变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AutoreleasePoolPage * const parent; //指向上一个AutoreleasePoolPage</span><br><span class="line">AutoreleasePoolPage *child; //指向下一个AutoreleasePoolPage</span><br></pre></td></tr></table></figure>
<p>parent指针和child指针，parent指向的上一个AutoreleasePoolPage的内存空间地址而child则指向下一个AutoreleasePoolPage的内存地址，当一个AutoreleasePoolPage的空间被占满时，会新建一个AutoreleasePoolPage对象，连接链表，后来的autorelease对象在新的page加入。这样无论在添加autorelease对象地址和释放autorelease对象地址的时候都能很准确的找到对应的AutoreleasePoolPage的地址<br><img src="/.io//%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.png" alt="双向链表"></p>
<p>具体查看AutoreleasePoolPage的工作原理，可以用_objc_autoreleasePoolPrint这个私有函数来查看</p>
<h1 id="Runloop和AutoreleasePool的关系"><a href="#Runloop和AutoreleasePool的关系" class="headerlink" title="Runloop和AutoreleasePool的关系"></a>Runloop和AutoreleasePool的关系</h1><p>我们新建一个空的工程，在viewDidLoad打印[NSRunLoop mainRunLoop]的详细信息，我们会在observers发现两个关于AutoreleasePool的Handler操作_wrapRunLoopWithAutoreleasePoolHandler：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">observers = (</span><br><span class="line">    &quot;&lt;CFRunLoopObserver 0x600001f68140 [0x1053f6b68]&gt;&#123;valid = Yes, activities = 0x1, repeats = Yes, order = -2147483647, callout = _wrapRunLoopWithAutoreleasePoolHandler (0x107fe51b1), context = &lt;CFArray 0x600002020330 [0x1053f6b68]&gt;&#123;type = mutable-small, count = 1, values = (\n\t0 : &lt;0x7ff476808058&gt;\n)&#125;&#125;&quot;,</span><br><span class="line">    &quot;&lt;CFRunLoopObserver 0x600001f6c1e0 [0x1053f6b68]&gt;&#123;valid = Yes, activities = 0x20, repeats = Yes, order = 0, callout = _UIGestureRecognizerUpdateObserver (0x107bb7473), context = &lt;CFRunLoopObserver context 0x60000056dea0&gt;&#125;&quot;,</span><br><span class="line">    &quot;&lt;CFRunLoopObserver 0x600001f68c80 [0x1053f6b68]&gt;&#123;valid = Yes, activities = 0xa0, repeats = Yes, order = 1999000, callout = _beforeCACommitHandler (0x108014dfc), context = &lt;CFRunLoopObserver context 0x7ff475d024b0&gt;&#125;&quot;,</span><br><span class="line">    &quot;&lt;CFRunLoopObserver 0x600001f68960 [0x1053f6b68]&gt;&#123;valid = Yes, activities = 0xa0, repeats = Yes, order = 2000000, callout = _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv (0x109a136ae), context = &lt;CFRunLoopObserver context 0x0&gt;&#125;&quot;,</span><br><span class="line">    &quot;&lt;CFRunLoopObserver 0x600001f68be0 [0x1053f6b68]&gt;&#123;valid = Yes, activities = 0xa0, repeats = Yes, order = 2001000, callout = _afterCACommitHandler (0x108014e75), context = &lt;CFRunLoopObserver context 0x7ff475d024b0&gt;&#125;&quot;,</span><br><span class="line">    &quot;&lt;CFRunLoopObserver 0x600001f68b40 [0x1053f6b68]&gt;&#123;valid = Yes, activities = 0xa0, repeats = Yes, order = 2147483647, callout = _wrapRunLoopWithAutoreleasePoolHandler (0x107fe51b1), context = &lt;CFArray 0x600002020330 [0x1053f6b68]&gt;&#123;type = mutable-small, count = 1, values = (\n\t0 : &lt;0x7ff476808058&gt;\n)&#125;&#125;&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>我们查看它的activities，分别是在0x1和0xa0，那这两个分别有代表是什么呢？在runloop 的源码里我们可以找到runloop的相关枚举：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) &#123;</span><br><span class="line">     kCFRunLoopEntry = (1UL &lt;&lt; 0),  // 1</span><br><span class="line">     kCFRunLoopBeforeTimers = (1UL &lt;&lt; 1), // 2</span><br><span class="line">     kCFRunLoopBeforeSources = (1UL &lt;&lt; 2), // 4</span><br><span class="line">     kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5), // 32</span><br><span class="line">     kCFRunLoopAfterWaiting = (1UL &lt;&lt; 6), // 64</span><br><span class="line">     kCFRunLoopExit = (1UL &lt;&lt; 7), // 128</span><br><span class="line">     kCFRunLoopAllActivities = 0x0FFFFFFFU</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>
<p>根据位运算可以的出上述结果：0x1 &#x3D; 1 等价于kCFRunLoopEntry，0xa0 &#x3D; 64 + 128 等价于 kCFRunLoopBeforeWaiting | kCFRunLoopExit，意味着runloop会在kCFRunLoopEntry时进行一次push操作，在kCFRunLoopBeforeWaiting进行一次pop操作，然后在进行一次push操作，最后会在kCFRunLoopExit时进行一次pop操作。</p>
<p>也就是说runloop会在即将进行休眠和退出runloop是将AutoreleasePool进行释放。</p>
]]></content>
      <categories>
        <category>底层原理</category>
      </categories>
      <tags>
        <tag>Autorelease</tag>
        <tag>RunLoop</tag>
        <tag>底层原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Notification与多线程</title>
    <url>/2017/04/11/Notification%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>前几天与同事讨论到Notification在多线程下的转发问题，所以就此整理一下。</p>
</blockquote>
<span id="more"></span>

<h1 id="Notification与多线程"><a href="#Notification与多线程" class="headerlink" title="Notification与多线程"></a>Notification与多线程</h1><p>先来看看官方的文档，是这样写的：</p>
<p>In a multithreaded application, notifications are always delivered in the thread in which the notification was posted, which may not be the same thread in which an observer registered itself.</p>
<p>翻译过来是：</p>
<p>在多线程应用中，Notification在哪个线程中post，就在哪个线程中被转发，而不一定是在注册观察者的那个线程中。</p>
<p>也就是说，Notification的发送与接收处理都是在同一个线程中。为了说明这一点，我们先来看一个示例：</p>
<h2 id="Notification的发送与处理"><a href="#Notification的发送与处理" class="headerlink" title="Notification的发送与处理"></a>Notification的发送与处理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@implementation ViewController</span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;current thread = %@&quot;, [NSThread currentThread]);</span><br><span class="line"></span><br><span class="line">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleNotification:) name:TEST_NOTIFICATION object:nil];</span><br><span class="line"></span><br><span class="line">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line"></span><br><span class="line">        [[NSNotificationCenter defaultCenter] postNotificationName:TEST_NOTIFICATION object:nil userInfo:nil];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)handleNotification:(NSNotification *)notification</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;current thread = %@&quot;, [NSThread currentThread]);</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;test notification&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>其输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2015-03-11 22:05:12.856 test[865:45102] current thread = &lt;NSThread: 0x7fbb23412f30&gt;&#123;number = 1, name = main&#125;</span><br><span class="line">2015-03-11 22:05:12.857 test[865:45174] current thread = &lt;NSThread: 0x7fbb23552370&gt;&#123;number = 2, name = (null)&#125;</span><br><span class="line">2015-03-11 22:05:12.857 test[865:45174] test notification</span><br></pre></td></tr></table></figure>



<p>可以看到，虽然我们在主线程中注册了通知的观察者，但在全局队列中post的Notification，并不是在主线程处理的。所以，这时候就需要注意，如果我们想在回调中处理与UI相关的操作，需要确保是在主线程中执行回调。</p>
<p>这时，就有一个问题了，如果我们的Notification是在二级线程中post的，如何能在主线程中对这个Notification进行处理呢？或者换个提法，如果我们希望一个Notification的post线程与转发线程不是同一个线程，应该怎么办呢？我们看看官方文档是怎么说的：</p>
<p>For example, if an object running in a background thread is listening for notifications from the user interface, such as a window closing, you would like to receive the notifications in the background thread instead of the main thread. In these cases, you must capture the notifications as they are delivered on the default thread and redirect them to the appropriate thread.</p>
<p>这里讲到了“重定向”，就是我们在Notification所在的默认线程中捕获这些分发的通知，然后将其重定向到指定的线程中。</p>
<p>一种重定向的实现思路是自定义一个通知队列(注意，不是NSNotificationQueue对象，而是一个数组)，让这个队列去维护那些我们需要重定向的Notification。我们仍然是像平常一样去注册一个通知的观察者，当Notification来了时，先看看post这个Notification的线程是不是我们所期望的线程，如果不是，则将这个Notification存储到我们的队列中，并发送一个信号(signal)到期望的线程中，来告诉这个线程需要处理一个Notification。指定的线程在收到信号后，将Notification从队列中移除，并进行处理。</p>
<p>官方文档已经给出了示例代码，在此借用一下，以测试实际结果：</p>
<h2 id="在不同线程中post和转发一个Notification"><a href="#在不同线程中post和转发一个Notification" class="headerlink" title="在不同线程中post和转发一个Notification"></a>在不同线程中post和转发一个Notification</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &quot;ViewController.h&quot;</span><br><span class="line"></span><br><span class="line">@interface ViewController ()&lt;NSMachPortDelegate&gt;</span><br><span class="line">@property (nonatomic ,strong) NSMachPort *machPort;</span><br><span class="line">@property (nonatomic ,strong) NSThread *thread;</span><br><span class="line">@property (nonatomic ,strong) NSLock *lock;</span><br><span class="line">@property (nonatomic ,strong) NSMutableArray *notifiQueue;//通知队列</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">static void Callback(CFNotificationCenterRef center,</span><br><span class="line">                     void *observer,</span><br><span class="line">                     CFStringRef name,</span><br><span class="line">                     const void *object,</span><br><span class="line">                     CFDictionaryRef userInfo)</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;CFNotificationCenterRef====%@====%@&quot;,[NSThread currentThread],name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    self.notifiQueue = @[].mutableCopy;</span><br><span class="line">    self.thread = [NSThread currentThread];</span><br><span class="line">    self.lock = [[NSLock alloc] init];</span><br><span class="line">    self.machPort = [[NSMachPort alloc] init];</span><br><span class="line">    self.machPort.delegate = self;</span><br><span class="line">    </span><br><span class="line">    // 往当前线程的run loop添加端口源</span><br><span class="line">    // 当Mach消息到达而接收线程的runloop没有运行时，则内核会保存这条消息，直到下一次进入runloop</span><br><span class="line">    [[NSRunLoop currentRunLoop] addPort:self.machPort forMode:(__bridge NSString *)kCFRunLoopCommonModes];</span><br><span class="line">    </span><br><span class="line">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(processNotification:) name:@&quot;TestNotification&quot; object:nil];</span><br><span class="line">    </span><br><span class="line">    //CFNotificationCenterRef:通过CFNotificationCenterRef发送出来的通知无论是在子线程还是主线程最终都会h转发到主线程中</span><br><span class="line">    CFNotificationCenterRef center = CFNotificationCenterGetDarwinNotifyCenter();</span><br><span class="line"></span><br><span class="line">    CFNotificationSuspensionBehavior behavior = CFNotificationSuspensionBehaviorDeliverImmediately;</span><br><span class="line"></span><br><span class="line">    CFNotificationCenterAddObserver(center,</span><br><span class="line">                                    NULL,</span><br><span class="line">                                    Callback,</span><br><span class="line">                                    CFSTR(&quot;notification.identifier&quot;),</span><br><span class="line">                                    NULL,</span><br><span class="line">                                    behavior);</span><br><span class="line">    //NSNotificationCenter:子线程发出的通知依旧在子线程</span><br><span class="line">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(doSome:) name:@&quot;notification.identifier&quot; object:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)doSome:(NSNotification *)notifi &#123;</span><br><span class="line">    NSLog(@&quot;NSNotificationCenter====%@====%@&quot;,[NSThread currentThread],notifi.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)processNotification:(NSNotification *)notifi &#123;</span><br><span class="line">    if ([NSThread currentThread] != self.thread) &#123;</span><br><span class="line">        NSLog(@&quot;NSMachPort if====%@====%@&quot;,[NSThread currentThread],notifi.name);</span><br><span class="line">        [self.lock lock];</span><br><span class="line">        [self.notifiQueue addObject:notifi];</span><br><span class="line">        [self.lock unlock];</span><br><span class="line">        //通过MachPort转发子线程通知到主线程</span><br><span class="line">        [self.machPort sendBeforeDate:[NSDate date]</span><br><span class="line">                                   components:nil</span><br><span class="line">                                         from:nil</span><br><span class="line">                                     reserved:0];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        NSLog(@&quot;NSMachPort else====%@====%@&quot;, [NSThread currentThread],notifi.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// MARK: - NSMachPortDelegate</span><br><span class="line"></span><br><span class="line">- (void)handleMachMessage:(void *)msg &#123;</span><br><span class="line">    [self.lock lock];</span><br><span class="line">    NSLog(@&quot;self.notifiQueue ==== %@&quot;,self.notifiQueue);</span><br><span class="line">    while ([self.notifiQueue count]) &#123;</span><br><span class="line">        NSNotification *notification = [self.notifiQueue objectAtIndex:0];</span><br><span class="line">        [self.notifiQueue removeObjectAtIndex:0];</span><br><span class="line">        [self.lock unlock];</span><br><span class="line">        [self processNotification:notification];</span><br><span class="line">        [self.lock lock];</span><br><span class="line">    &#125;;</span><br><span class="line">    [self.lock unlock];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">// 其它地方</span><br><span class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">        void *Object;</span><br><span class="line">        CFDictionaryRef userInfo;</span><br><span class="line">        CFNotificationCenterRef center = CFNotificationCenterGetDarwinNotifyCenter();</span><br><span class="line">        CFNotificationCenterPostNotification(center,</span><br><span class="line">                                             CFSTR(&quot;notification.identifier&quot;),</span><br><span class="line">                                             Object,</span><br><span class="line">                                             userInfo,</span><br><span class="line">                                             true);</span><br><span class="line">        NSLog(@&quot;CFNotificationCenterRef====%@====%p&quot;,[NSThread currentThread],Object);</span><br><span class="line">        [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;notification.identifier&quot; object:nil];</span><br><span class="line">        [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;TestNotification&quot; object:nil];</span><br><span class="line">        NSLog(@&quot;NSNotificationCenter====%@&quot;,[NSThread currentThread]);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>



<p>上面的代码就是我们通常所做的事情：添加一个通知监听者，定义一个回调，并在所属对象释放时移除监听者；然后在程序的某个地方post一个通知。简单明了，如果这一切都是发生在一个线程里面，或者至少dealloc方法是在-postNotificationName:的线程中运行的(注意：NSNotification的post和转发是同步的)，那么都OK，没有线程安全问题。但如果dealloc方法和-postNotificationName:方法不在同一个线程中运行时，会出现什么问题呢？</p>
<p>我们再改造一下上面的代码：</p>
<h2 id="NSNotificationCenter引发的线程安全问题"><a href="#NSNotificationCenter引发的线程安全问题" class="headerlink" title="NSNotificationCenter引发的线程安全问题"></a>NSNotificationCenter引发的线程安全问题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma mark - Poster</span><br><span class="line">	</span><br><span class="line">@interface Poster : NSObject</span><br><span class="line">	</span><br><span class="line">@end</span><br><span class="line">	</span><br><span class="line">@implementation Poster</span><br><span class="line">	</span><br><span class="line">- (instancetype)init</span><br><span class="line">&#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    </span><br><span class="line">    if (self)</span><br><span class="line">    &#123;</span><br><span class="line">        [self performSelectorInBackground:@selector(postNotification) withObject:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">- (void)postNotification</span><br><span class="line">&#123;</span><br><span class="line">    [[NSNotificationCenter defaultCenter] postNotificationName:TEST_NOTIFICATION object:nil];</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">@end</span><br><span class="line">	</span><br><span class="line">#pragma mark - Observer</span><br><span class="line">	</span><br><span class="line">@interface Observer : NSObject</span><br><span class="line">&#123;</span><br><span class="line">    Poster  *_poster;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">@property (nonatomic, assign) NSInteger i;</span><br><span class="line">	</span><br><span class="line">@end</span><br><span class="line">	</span><br><span class="line">@implementation Observer</span><br><span class="line">	</span><br><span class="line">- (instancetype)init</span><br><span class="line">&#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    </span><br><span class="line">    if (self)</span><br><span class="line">    &#123;</span><br><span class="line">        _poster = [[Poster alloc] init];</span><br><span class="line">        </span><br><span class="line">        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleNotification:) name:TEST_NOTIFICATION object:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">- (void)handleNotification:(NSNotification *)notification</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;handle notification begin&quot;);</span><br><span class="line">    sleep(1);</span><br><span class="line">    NSLog(@&quot;handle notification end&quot;);</span><br><span class="line">    </span><br><span class="line">    self.i = 10;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">- (void)dealloc</span><br><span class="line">&#123;</span><br><span class="line">    [[NSNotificationCenter defaultCenter] removeObserver:self];</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;Observer dealloc&quot;);</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">@end</span><br><span class="line">	</span><br><span class="line">#pragma mark - ViewController</span><br><span class="line">	</span><br><span class="line">@implementation ViewController</span><br><span class="line">	</span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    __autoreleasing Observer *observer = [[Observer alloc] init];</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>



<p>这段代码是在主线程添加了一个TEST_NOTIFICATION通知的监听者，并在主线程中将其移除，而我们的NSNotification是在后台线程中post的。在通知处理函数中，我们让回调所在的线程睡眠1秒钟，然后再去设置属性i值。这时会发生什么呢？我们先来看看输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2015-03-14 00:31:41.286 SKTest[932:88791] handle notification begin</span><br><span class="line">2015-03-14 00:31:41.291 SKTest[932:88713] Observer dealloc</span><br><span class="line">2015-03-14 00:31:42.361 SKTest[932:88791] handle notification end</span><br><span class="line">(lldb) </span><br><span class="line">	</span><br><span class="line">// 程序在self.i = 10处抛出了&quot;Thread 6: EXC_BAD_ACCESS(code=EXC_I386_GPFLT)&quot;</span><br></pre></td></tr></table></figure>

<p>经典的内存错误，程序崩溃了。其实从输出结果中，我们就可以看到到底是发生了什么事。我们简要描述一下：</p>
<ol>
<li>当我们注册一个观察者是，通知中心会持有观察者的一个弱引用，来确保观察者是可用的。</li>
<li>主线程调用dealloc操作会让Observer对象的引用计数减为0，这时对象会被释放掉。</li>
<li>后台线程发送一个通知，如果此时Observer还未被释放，则会向其转发消息，并执行回调方法。而如果在回调执行的过程中对象被释放了，就会出现上面的问题。</li>
</ol>
<p>当然，上面这个例子是故意而为之，但不排除在实际编码中会遇到类似的问题。虽然NSNotificationCenter是线程安全的，但并不意味着我们在使用时就可以保证线程安全的，如果稍不注意，还是会出现线程问题。</p>
<p>那我们该怎么做呢？这里有一些好的建议：</p>
<ol>
<li>尽量在一个线程中处理通知相关的操作，大部分情况下，这样做都能确保通知的正常工作。不过，我们无法确定到底会在哪个线程中调用dealloc方法，所以这一点还是比较困难。</li>
<li>注册监听都时，使用基于block的API。这样我们在block还要继续调用self的属性或方法，就可以通过weak-strong的方式来处理。具体大家可以改造下上面的代码试试是什么效果。</li>
<li>使用带有安全生命周期的对象，这一点对象单例对象来说再合适不过了，在应用的整个生命周期都不会被释放。</li>
<li>使用代理。</li>
</ol>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>NSNotificationCenter虽然是线程安全的，但不要被这个事实所误导。在涉及到多线程时，我们还是需要多加小心，避免出现上面的线程问题。想进一步了解的话，可以查看<a href="http://inessential.com/2013/12/20/observers_and_thread_safety">Observers and Thread Safety</a>。</p>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>通知</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS Reveal2Loader修复版（iOS13修复）</title>
    <url>/2020/09/14/iOS%20Reveal2Loader%E4%BF%AE%E5%A4%8D%E7%89%88%EF%BC%88iOS13%E4%BF%AE%E5%A4%8D%EF%BC%89/</url>
    <content><![CDATA[<p>今天同事说这个插件在iOS13越狱下失效了，所以就修复了在iOS13下无法窥探的bug，把RevealLoader库也更新到了24，附带<a href="https://www.macwk.com/soft/reveal">Reveal24下载地址</a>。</p>
<p>修复后的Reveal源地址：<a href="https://eziochiu.cn/cydia/">https://eziochiu.cn/cydia/</a></p>
<p><del>随着iOS12 越狱的发布，又可以在iOS12的机器上随便搞事情了，但是今天突然发现安装bigBoss上的Reveal2Loader插件替换RevealLoader的库之后竟然无法窥探系统APP和第三方APP，然后在插间内部看到了作者的源码，于是心血来潮就进行了修改一番。</del></p>
<span id="more"></span>

<p>具体修改过程就不说了，<a href="https://github.com/eziochiu/Reveal2Loader-Fixed-or-iOS12">修改后的源码</a>,<a href="https://github.com/zidaneno5/Reveal2Loader">作者源码</a></p>
<h1 id="打包及安装方法"><a href="#打包及安装方法" class="headerlink" title="打包及安装方法"></a>打包及安装方法</h1><p>1、cd 到工程目录reveal2Loader文件夹下 执行下列语句</p>
<blockquote>
<p>find . -name .DS_Store -print0 | xargs -0 git rm -f –ignore-unmatch 删除当前目录的DS_Store隐藏文件</p>
<p>sudo dpkg-deb -b Package reveal2Loader.deb (前提是必须安装dpkg，可以用brew安装也可以用macport安装)</p>
</blockquote>
<p>然后会在目录下生成reveal2Loader.deb</p>
<p>2、将reveal2Loader.deb拷贝到手机</p>
<p>3、将原来的reveal2Loader插件卸载，注销SpringBoard</p>
<p>4、直接用filza找到该文件进行安装，前提是卸载之前的旧版本，否则会报错。</p>
<p>enjoy！！！</p>
<div style="width: 900px; margin: auto">![样例](QQ20190225-124715@2x.png)</div>

<div style="width: 900px; margin: auto">![样例](QQ20190225-124731@2x.png)</div>]]></content>
      <categories>
        <category>越狱插件</category>
      </categories>
      <tags>
        <tag>Reveal2Loader</tag>
        <tag>越狱插件</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS多线程编程之GCD(更新swift3.0用法)</title>
    <url>/2018/04/20/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E4%B9%8BGCD-%E6%9B%B4%E6%96%B0swift3-0%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>iOS多线程编程之GCD</p>
</blockquote>
<span id="more"></span>

<h2 id="iOS多线程编程之GCD-更新swift3-0用法"><a href="#iOS多线程编程之GCD-更新swift3-0用法" class="headerlink" title="iOS多线程编程之GCD(更新swift3.0用法)"></a>iOS多线程编程之GCD(更新swift3.0用法)</h2><p><strong>如果不考虑到其他任何因素和技术</strong>，多线程其实是百害而无一利的，只能浪费时间，降低CPU的运行效率。</p>
<p>试想一下，一个任务由十个子任务组成。现在有两种方式去完成这个任务：</p>
<p>1、新建是个线程，把每个子任务放到对应的子线程中去执行。执行完一个线程就切换到另外一个线程；</p>
<p>2、把是个人物放在一个线程里，按顺序执行。</p>
<p>线程，是执行程序的最基本单元，他有自己的栈和自己的寄存器。说的具体一点，<strong>线程就是“一个CPU执行一条无分叉的命令列”</strong>。</p>
<p>对于第一种方法，在十条线程之间来回切换，就意味着有十组栈和寄存器的值需要不断地备份、替换。而对于第二种方法，只需要一组寄存器和栈的存在，显然效率更加高效。</p>
<hr>
<h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p>通过刚刚的分析，我们可以看到，多线程本身并不能带来效率上的提升。严格意义上来说多线程在处理并发任务时，并不能提高其运行效率，反而会降低程序的运行效率。</p>
<p>那么什么是并发呢？它和并行不一样</p>
<blockquote>
<p>并发指的是一种现象，一种经常出现，无可避免的现象。它描述的是“多个任务同时发生，需要被处理”这一现象。它的侧重点在于“发生”。</p>
</blockquote>
<p>比如或者站排队检票。</p>
<blockquote>
<p>并行指的是一种技术，一个同时处理多个任务的技术。它描述了一种能够同时处理多个任务的能力，侧重点在于“运行”。</p>
</blockquote>
<p>比如景点开放了多个检票窗口，同一时间内能服务多个游客。这种情况可以理解为并行。</p>
<p>并行的反义词就是串行，表示任务必须按顺序来，一个一个执行，前一个执行完了才能执行后一个。</p>
<p>然而我们经常挂载嘴边的“多线程”其实正是采用了并行技术，从而提高执行效率。因为有多个线程，所以CPU有多个内核可以同时工作。并同时处理不同线程内的指令。</p>
<p>然而并发是一种现象，面向这一对象，我们首先需要先创建多个线程，然而真正加快程序运行速度的，是并行技术。也就是让多个CPU内核同时工作，而多线程的技术，正是让多个CPU同时进行工作。</p>
<hr>
<h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><p>同步方法就是我们平时调用的哪些方法。因为任何有编程经验的人都知道，比如在第一行调用<code>foo()</code>方法，那么程序运行到第二行的时候，foo()方法肯定是执行完了。</p>
<p>所谓的异步，就是允许在执行某一个任务时，函数立刻返回，但是真正要执行的任务稍后完成。</p>
<p>比如我们在点击保存按钮之后，要先把数据写到磁盘，然后更新UI。同步方法就是等到数据保存完再更新UI，而异步则是立刻从保存数据的方法返回并向后执行代码，同时真正用来保存数据的指令将在稍后执行。</p>
<hr>
<h3 id="GCD简介"><a href="#GCD简介" class="headerlink" title="GCD简介"></a>GCD简介</h3><p>GCD是以block为单位，一个block中的代码可以为一个任务。下文中提到的任务，可以理解为执行某个block。</p>
<p>同时GCD有两个很重要的概念：列队和执行方式。</p>
<h4 id="三种队列："><a href="#三种队列：" class="headerlink" title="三种队列："></a>三种队列：</h4><ul>
<li>串行列队：先入先出，每次只只执行一个任务；</li>
<li>并发列队：依然是先入先出，但是可以多个任务并发执行；</li>
<li>主列队：在主线程中执行；</li>
</ul>
<h4 id="两种执行方式："><a href="#两种执行方式：" class="headerlink" title="两种执行方式："></a>两种执行方式：</h4><ul>
<li>同步执行</li>
<li>异步执行</li>
</ul>
<p>其关系如下</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">同步</th>
<th align="center">异步</th>
</tr>
</thead>
<tbody><tr>
<td align="center">主列队</td>
<td align="center">在主线程中执行</td>
<td align="center">在当前主线程中执行</td>
</tr>
<tr>
<td align="center">串行列队</td>
<td align="center">在当前线程中执行</td>
<td align="center">新建线程执行</td>
</tr>
<tr>
<td align="center">并发列队</td>
<td align="center">在当前线程中执行</td>
<td align="center">新建线程执行</td>
</tr>
</tbody></table>
<hr>
<h3 id="GCD死锁"><a href="#GCD死锁" class="headerlink" title="GCD死锁"></a>GCD死锁</h3><p>下面的代码会造成死锁：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DispatchQueue.main.sync &#123;</span><br><span class="line">    print(&quot;当前线程\(Thread.current)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">其写法相当于OC中的：</span><br><span class="line">dispatch_sync(dispatch_get_main_queue()&#123;</span><br><span class="line">    NSLog(@&quot;当前线程%@&quot;,NSThread.currentThread);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>为什么会造成死锁？首先这是swift3.0的写法，DispatchQueue.main表示已经在主队列中执行，而sync中的代码块也是在当前的主队列中执行，那么，如果sync代码块中的代码要执行，则需要等待DispatchQueue.main执行完成才能执行，而DispatchQueue.main的代码要执行，则需要sync中的代码块执行完成才能执行，那么这样主队列中的两个任务就处在相互等待的状态，都在等对方先执行，而造成了死锁的问题。</p>
<p>其实这种解决方案很简单，只带代码写成下面这样就不会造成死锁：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DispatchQueue.main.async &#123;</span><br><span class="line">    print(&quot;当前线程\(Thread.current)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>async是一个异步执行方式，由于是在异步执行，那么就不会存在主队列相互等待的状态，这样就不会造成死锁的问题。</p>
<hr>
<h3 id="GCD中的group"><a href="#GCD中的group" class="headerlink" title="GCD中的group"></a>GCD中的group</h3><p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let group = DispatchGroup()</span><br><span class="line">DispatchQueue(label: &quot;label1&quot;).async(group:group) &#123;</span><br><span class="line">    print(&quot;当前线程111\(Thread.current)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">DispatchQueue(label: &quot;label2&quot;).async(group: group) &#123;</span><br><span class="line">    print(&quot;当前线程222\(Thread.current)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">group.notify(queue: DispatchQueue.main) &#123;</span><br><span class="line">    print(&quot;当前线程333\(Thread.current)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在一个gcd队列组中并发执行线程111和线程222，所有并发线程完成之后通过队列组中的notify方法，回调到主线程。</p>
<hr>
<h3 id="GCD中的barrier"><a href="#GCD中的barrier" class="headerlink" title="GCD中的barrier"></a>GCD中的barrier</h3><p>GCD中的barrier是用来控制GCD线程的先后顺序的方法，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let group = DispatchGroup()</span><br><span class="line">let queue = DispatchQueue.init(label: &quot;queue&quot;)</span><br><span class="line">queue.async(group:group) &#123;</span><br><span class="line">    for i in 0..&lt;10 &#123;</span><br><span class="line">        print(&quot;\(i)&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    print(&quot;当前线程111\(Thread.current)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">queue.async(group: group, qos: .default, flags: .barrier) &#123;</span><br><span class="line">    print(&quot;线程阻塞中。。。&quot;)</span><br><span class="line">&#125;</span><br><span class="line">queue.async(group: group) &#123;</span><br><span class="line">    for i in 0..&lt;20 &#123;</span><br><span class="line">        print(&quot;\(i)&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    print(&quot;当前线程222\(Thread.current)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">group.notify(queue: DispatchQueue.main) &#123;</span><br><span class="line">    print(&quot;当前线程333\(Thread.current)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="GCD中的信号量（semaphore）"><a href="#GCD中的信号量（semaphore）" class="headerlink" title="GCD中的信号量（semaphore）"></a>GCD中的信号量（semaphore）</h3><p>如果你有计算机基础，那么下面这段话应该很简单就能理解</p>
<blockquote>
<p>信号量就是一个资源计数器，对信号量有两个操作来达到互斥，分别是P和V操作。 一般情况是这样进行临界访问或互斥访问的： 设信号量值为1， 当一个进程1运行是，使用资源，进行P操作，即对信号量值减1，也就是资源数少了1个。这是信号量值为0。系统中规定当信号量值为0是，必须等待，知道信号量值不为零才能继续操作。 这时如果进程2想要运行，那么也必须进行P操作，但是此时信号量为0，所以无法减1，即不能P操作，也就阻塞。这样就到到了进程1排他访问。 当进程1运行结束后，释放资源，进行V操作。资源数重新加1，这是信号量的值变为1. 这时进程2发现资源数不为0，信号量能进行P操作了，立即执行P操作。信号量值又变为0.次数进程2咱有资源，排他访问资源。 这就是信号量来控制互斥的原理</p>
</blockquote>
<p>简单点来说，信号量为0时，阻塞线程，大于0是不会阻塞线程，GCD则可以通过信号量的值来达到是否阻塞线程，从而达到线程同步。</p>
<p>简单来说，在GCD中，让线程同步可以用三种方法（就目前我所能想到的）：</p>
<ul>
<li><p>group</p>
</li>
<li><p>barrier</p>
</li>
<li><p>semaphore</p>
</li>
</ul>
<p>group和barrier前面我们已经讲解过了，下面我们来说一说semaphore的的用法，在GCD中的信号量有三个函数操作：</p>
<ul>
<li><p>DispatchSemaphore.init   -&gt;   OC代码（dispatch_semaphore_create）&#x2F;&#x2F;<strong>创建一个semaphore信号量</strong></p>
</li>
<li><p>dispatch_semaphore_signal     &#x2F;&#x2F;<strong>发送一个信号</strong></p>
</li>
<li><p>dispatch_semaphore_wait       &#x2F;&#x2F;<strong>等待信号</strong></p>
</li>
</ul>
<p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let queue = DispatchQueue.init(label: &quot;queue&quot;)</span><br><span class="line">let semaphore = DispatchSemaphore.init(value: 2)//初始化的信号量为2</span><br><span class="line">for i in 0...2 &#123;</span><br><span class="line">    print(i)</span><br><span class="line">    _ = semaphore.wait()</span><br><span class="line">    _ = semaphore.wait(timeout: DispatchTime.now() + 10.0)//当前信号量为0时，阻塞线程10秒，10秒过后信号量如果依然为0，将不再等待，继续执行下面的代码</span><br><span class="line">    queue.async &#123;</span><br><span class="line">        for j in 0...3 &#123;</span><br><span class="line">            print(&quot;有限资源\(j)&quot;)</span><br><span class="line">            sleep(3)//阻塞线程3秒</span><br><span class="line">            print(&quot;-------------------&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">        semaphore.signal()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>GCD</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS多线程编程之线程锁</title>
    <url>/2017/02/24/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E9%94%81/</url>
    <content><![CDATA[<h1 id="何所谓线程安全"><a href="#何所谓线程安全" class="headerlink" title="何所谓线程安全"></a>何所谓线程安全</h1><p>线程安全就是在多线程访问的同时，采用用了加锁机制，当一个线程访问该线程外的某个数据时，进行保护，其他线程不能进行访问，直到该线程读取完毕，其他线程才可以访问。保护线程安全无在乎就是对线程进行加锁。</p>
<p>在iOS开发中常用的加锁方式有以下几种：</p>
<span id="more"></span>

<h1 id="NSLock"><a href="#NSLock" class="headerlink" title="NSLock"></a>NSLock</h1><p>在iOS程序中NSLock中实现了一个简单的互斥锁，实现了NSLocking协议，</p>
<p>lock为加锁，</p>
<p>unlock为解锁，</p>
<p>tryLock为尝试加锁，如果加锁失败则不会阻塞线程，只会立即回调，需要注意的是，使用tryLock并不能加锁成功 ，如果获取锁失败，则不会执行加锁。</p>
<p>NOLockBforeDate:在指定的date之前暂时阻塞线程（如果没有获取锁），如果在指定的时间仍然没有获取到🔐的话。线程会被立即唤醒，函数立即返回NO。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    __weak typeof(self) weakSelf = self;</span><br><span class="line">    dispatch_group_t group = dispatch_group_create();</span><br><span class="line">    dispatch_queue_t queueA = dispatch_queue_create(&quot;queueA&quot;, nil);</span><br><span class="line">    dispatch_queue_t queueB = dispatch_queue_create(&quot;queueB&quot;, nil);</span><br><span class="line">    dispatch_group_async(group, queueA, ^&#123;</span><br><span class="line">        [weakSelf getWithArray:weakSelf.array];</span><br><span class="line">        NSLog(@&quot;%@线程A&quot;,weakSelf.array);</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_group_async(group, queueB, ^&#123;</span><br><span class="line">        [weakSelf getWithArray:weakSelf.array];</span><br><span class="line">        NSLog(@&quot;%@线程B&quot;,weakSelf.array);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;%@主线程&quot;,weakSelf.array);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)getWithArray:(NSMutableArray *)array &#123;</span><br><span class="line">    [self.lock lock];</span><br><span class="line">    if (array.count &gt; 0) &#123;</span><br><span class="line">        NSLog(@&quot;%@...objc&quot;,array.lastObject);</span><br><span class="line">        [array removeLastObject];</span><br><span class="line">    &#125;</span><br><span class="line">    [self.lock unlock];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不加锁的打印：可看出线程A和线程B同时操作了getWithArray:(NSMutableArray *)array，由于资源抢占，导致了数组越界而崩溃</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2016-07-22 22:18:55.695827+0800 ThreadLock[10764:315922] 4444...objc</span><br><span class="line">2016-07-22 22:18:55.695827+0800 ThreadLock[10764:315923] 4444...objc</span><br><span class="line">2016-07-22 22:18:55.695892+0800 ThreadLock[10764:315824] (</span><br><span class="line">    1111,</span><br><span class="line">    2222,</span><br><span class="line">    3333,</span><br><span class="line">    4444</span><br><span class="line">)主线程</span><br><span class="line">2016-07-22 22:18:55.696036+0800 ThreadLock[10764:315922] (</span><br><span class="line">    1111,</span><br><span class="line">    2222,</span><br><span class="line">    3333</span><br><span class="line">)线程A</span><br><span class="line">2016-07-22 22:18:55.697056+0800 ThreadLock[10764:315923] *** Terminating app due to uncaught exception &#x27;NSRangeException&#x27;, reason: &#x27;*** -[__NSArrayM removeObjectsInRange:]: range &#123;3, 1&#125; extends beyond bounds [0 .. 2]&#x27;</span><br></pre></td></tr></table></figure>

<p>加锁打印：加锁后，线程A先跑，跑的过程中由于线程加锁，线程B无法访问getWithArray:(NSMutableArray *)array，线程A结束之后，线程B发现array中只剩下3个元素，所以把最后一个元素3333给remove掉了，从而达到了线程运行的安全。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2016-07-22 22:10:40.114063+0800 ThreadLock[10425:305487] 4444...objc</span><br><span class="line">2016-07-22 22:10:40.113988+0800 ThreadLock[10425:305421] (</span><br><span class="line">    1111,</span><br><span class="line">    2222,</span><br><span class="line">    3333,</span><br><span class="line">    4444</span><br><span class="line">)主线程</span><br><span class="line">2016-07-22 22:10:40.117108+0800 ThreadLock[10425:305487] (</span><br><span class="line">    1111,</span><br><span class="line">    2222,</span><br><span class="line">    3333</span><br><span class="line">)线程A</span><br><span class="line">2016-07-22 22:10:40.117076+0800 ThreadLock[10425:305486] 3333...objc</span><br><span class="line">2016-07-22 22:10:40.117703+0800 ThreadLock[10425:305486] (</span><br><span class="line">    1111,</span><br><span class="line">    2222</span><br><span class="line">)线程B</span><br></pre></td></tr></table></figure>

<h1 id="synchronized"><a href="#synchronized" class="headerlink" title="@synchronized"></a>@synchronized</h1><p>@synchronized在早期接触的iOS开发中经常接触，尤其是在创建单利模式的时候。</p>
<p>代码以及打印如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)getWithArray:(NSMutableArray *)array &#123;</span><br><span class="line">    @synchronized (self) &#123;</span><br><span class="line">        if (array.count &gt; 0) &#123;</span><br><span class="line">            NSLog(@&quot;%@...objc&quot;,array.lastObject);</span><br><span class="line">            [array removeLastObject];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2016-07-22 22:20:33.083045+0800 ThreadLock[10837:317900] 4444...objc</span><br><span class="line">2016-07-22 22:20:33.083278+0800 ThreadLock[10837:317693] (</span><br><span class="line">    1111,</span><br><span class="line">    2222,</span><br><span class="line">    3333,</span><br><span class="line">    4444</span><br><span class="line">)主线程</span><br><span class="line">2016-07-22 22:20:33.083437+0800 ThreadLock[10837:317900] (</span><br><span class="line">    1111,</span><br><span class="line">    2222,</span><br><span class="line">    3333</span><br><span class="line">)线程A</span><br><span class="line">2016-07-22 22:20:33.083438+0800 ThreadLock[10837:317899] 3333...objc</span><br><span class="line">2016-07-22 22:20:33.083814+0800 ThreadLock[10837:317899] (</span><br><span class="line">    1111,</span><br><span class="line">    2222</span><br><span class="line">)线程B</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="条件信号量dispatch-semaphore-t"><a href="#条件信号量dispatch-semaphore-t" class="headerlink" title="条件信号量dispatch_semaphore_t"></a>条件信号量dispatch_semaphore_t</h1><p>条件信号量详细用法见上一遍，GCD的用法</p>
<hr>
<h1 id="dispatch-barrier-async-dispatch-barrier-sync"><a href="#dispatch-barrier-async-dispatch-barrier-sync" class="headerlink" title="dispatch_barrier_async&#x2F;dispatch_barrier_sync"></a>dispatch_barrier_async&#x2F;dispatch_barrier_sync</h1><p>详细用法见上一遍，GCD的用法，但有一点值得注意的是：</p>
<blockquote>
<p>如果在当前线程调用dispatch_barrier_sync阻塞线程会发生死锁</p>
</blockquote>
<hr>
<h1 id="NSCondition"><a href="#NSCondition" class="headerlink" title="NSCondition"></a>NSCondition</h1><p>NSCondition同样实现了NSLocking协议，所以它和NSLock一样，也有NSLocking协议的lock和unlock方法，可以当做NSLock来使用解决线程同步问题，用法完全一样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)getWithArray:(NSMutableArray *)array &#123;</span><br><span class="line">    [self.lock lock];</span><br><span class="line">    if (array.count &gt; 0) &#123;</span><br><span class="line">        NSLog(@&quot;%@...objc&quot;,array.lastObject);</span><br><span class="line">        [array removeLastObject];</span><br><span class="line">    &#125;</span><br><span class="line">    [self.lock unlock];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时，NSCondition提供更高级的用法。wait和signal，和条件信号量类似。</p>
<p>比如我们要监听imageNames数组的个数，当imageNames的个数大于0的时候就执行清空操作。思路是这样的，当imageNames个数大于0时执行清空操作，否则，wait等待执行清空操作。当imageNames个数增加的时候发生signal信号，让等待的线程唤醒继续执行。</p>
<p>NSCondition和NSLock、@synchronized等是不同的是，NSCondition可以给每个线程分别加锁，加锁后不影响其他线程进入临界区。这是非常强大。但是正是因为这种分别加锁的方式，NSCondition使用wait并使用加锁后并不能真正的解决资源的竞争。比如我们有个需求：不能让m&lt;0。假设当前m&#x3D;0,线程A要判断到m&gt;0为假,执行等待；线程B执行了m&#x3D;1操作，并唤醒线程A执行m-1操作的同时线程C判断到m&gt;0，因为他们在不同的线程锁里面，同样判断为真也执行了m-1，这个时候线程A和线程C都会执行m-1,但是m&#x3D;1，结果就会造成m&#x3D;-1.</p>
<p>当我用数组做删除试验时，做增删操作并不是每次都会出现，大概3-4次后会出现。单纯的使用lock、unlock是没有问题的。</p>
<hr>
<h1 id="条件锁NSConditionLock"><a href="#条件锁NSConditionLock" class="headerlink" title="条件锁NSConditionLock"></a>条件锁NSConditionLock</h1><p>也有人说这是个互斥锁。NSConditionLock同样实现了NSLocking协议，试验过程中发现性能很低。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)getIamgeName:(NSMutableArray *)imageNames&#123;</span><br><span class="line">    NSString *imageName;</span><br><span class="line">    [lock lock];</span><br><span class="line">    if (imageNames.count&gt;0) &#123;</span><br><span class="line">        imageName = [imageNames lastObject];</span><br><span class="line">        [imageNames removeObject:imageName];</span><br><span class="line">    &#125;</span><br><span class="line">    [lock unlock];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>NSConditionLock也可以像NSCondition一样做多线程之间的任务等待调用，而且是线程安全的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)getIamgeName:(NSMutableArray *)imageNames&#123;</span><br><span class="line">    NSString *imageName;</span><br><span class="line">    [lock lockWhenCondition:1];    //加锁</span><br><span class="line">    if (imageNames.count&gt;0) &#123;</span><br><span class="line">        imageName = [imageNames lastObject];</span><br><span class="line">        [imageNames removeObjectAtIndex:0];</span><br><span class="line">    &#125;</span><br><span class="line">    [lock unlockWithCondition:0];     //解锁</span><br><span class="line">&#125;</span><br><span class="line">- (void)createImageName:(NSMutableArray *)imageNames&#123;</span><br><span class="line">    [lock lockWhenCondition:0];</span><br><span class="line">    [imageNames addObject:@&quot;0&quot;];</span><br><span class="line">    [lock unlockWithCondition:1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 多线程取出图片后删除</span><br><span class="line">- (void)getImageNameWithMultiThread&#123;</span><br><span class="line">    NSMutableArray *imageNames = [[NSMutableArray alloc]init];</span><br><span class="line">    dispatch_group_t dispatchGroup = dispatch_group_create();</span><br><span class="line">    __block double then, now;</span><br><span class="line">    then = CFAbsoluteTimeGetCurrent();</span><br><span class="line">    for (int i=0; i&lt;10000; i++) &#123;</span><br><span class="line">        dispatch_group_async(dispatchGroup, self.synchronizationQueue, ^()&#123;</span><br><span class="line">            [self getIamgeName:imageNames];</span><br><span class="line">        &#125;);</span><br><span class="line">        dispatch_group_async(dispatchGroup, self.synchronizationQueue, ^()&#123;</span><br><span class="line">            [self createImageName:imageNames];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    dispatch_group_notify(dispatchGroup, self.synchronizationQueue, ^()&#123;</span><br><span class="line">        now = CFAbsoluteTimeGetCurrent();</span><br><span class="line">        printf(&quot;thread_lock: %f sec\nimageNames count: %ld\n&quot;, now-then,imageNames.count);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="递归锁NSRecursiveLock"><a href="#递归锁NSRecursiveLock" class="headerlink" title="递归锁NSRecursiveLock"></a>递归锁NSRecursiveLock</h1><p>有时候“加锁代码”中存在递归调用，<strong>递归开始前加锁，递归调用开始后会重复执行此方法以至于反复执行加锁代码最终造成死锁，这个时候可以使用递归锁来解决。使用递归锁可以在一个线程中反复获取锁而不造成死锁，这个过程中会记录获取锁和释放锁的次数，只有最后两者平衡锁才被最终释放。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)getIamgeName:(NSMutableArray *)imageNames&#123;</span><br><span class="line">    NSString *imageName;</span><br><span class="line">    [lock lock];</span><br><span class="line">    if (imageNames.count&gt;0) &#123;</span><br><span class="line">        imageName = [imageNames firstObject];</span><br><span class="line">        [imageNames removeObjectAtIndex:0];</span><br><span class="line">        [self getIamgeName:imageNames];</span><br><span class="line">    &#125;</span><br><span class="line">    [lock unlock];</span><br><span class="line">&#125;</span><br><span class="line">- (void)getImageNameWithMultiThread&#123;</span><br><span class="line">    NSMutableArray *imageNames = [NSMutableArray new];</span><br><span class="line">    int count = 1024*10;</span><br><span class="line">    for (int i=0; i&lt;count; i++) &#123;</span><br><span class="line">        [imageNames addObject:[NSString stringWithFormat:@&quot;%d&quot;,i]];</span><br><span class="line">    &#125;</span><br><span class="line">    dispatch_group_t dispatchGroup = dispatch_group_create();</span><br><span class="line">    __block double then, now;</span><br><span class="line">    then = CFAbsoluteTimeGetCurrent();</span><br><span class="line">    dispatch_group_async(dispatchGroup, self.synchronizationQueue, ^()&#123;</span><br><span class="line">        [self getIamgeName:imageNames];</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_group_notify(dispatchGroup, dispatch_get_main_queue(), ^()&#123;</span><br><span class="line">        now = CFAbsoluteTimeGetCurrent();</span><br><span class="line">        printf(&quot;thread_lock: %f sec\nimageNames count: %ld\n&quot;, now-then,imageNames.count);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="NSDistributedLock"><a href="#NSDistributedLock" class="headerlink" title="NSDistributedLock"></a>NSDistributedLock</h1><p>NSDistributedLock是MAC开发中的跨进程的分布式锁，底层是用文件系统实现的互斥锁。NSDistributedLock没有实现NSLocking协议，所以没有lock方法，取而代之的是非阻塞的tryLock方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NSDistributedLock *lock = [[NSDistributedLock alloc] initWithPath:@&quot;/Users/mac/Desktop/lock.lock&quot;];</span><br><span class="line">    while (![lock tryLock])</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //do something</span><br><span class="line">    [lock unlock];</span><br></pre></td></tr></table></figure>

<p>当执行到do something时程序退出,程序再次启动之后tryLock就再也不能成功了,陷入死锁状态.其他应用也不能访问受保护的共享资源。在这种情况下，你可以使用breadLock方法来打破现存的锁以便你可以获取它。但是通常应该避免打破锁，除非你确定拥有进程已经死亡并不可能再释放该锁。</p>
<p>因为是MAC下的线程锁，所以demo里面没有，这里也不做过多关注。</p>
<hr>
<h1 id="互斥锁POSIX"><a href="#互斥锁POSIX" class="headerlink" title="互斥锁POSIX"></a>互斥锁POSIX</h1><p>POSIX和dispatch_semaphore_t很像，但是完全不同。POSIX是Unix&#x2F;Linux平台上提供的一套条件互斥锁的API。</p>
<p>新建一个简单的POSIX互斥锁，引入头文件<code>#import &lt;pthread.h&gt;</code>声明并初始化一个pthread_mutex_t的结构。使用pthread_mutex_lock和pthread_mutex_unlock函数。调用pthread_mutex_destroy来释放该锁的数据结构。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;pthread.h&gt;</span><br><span class="line">@interface MYPOSIXViewController ()</span><br><span class="line">&#123;</span><br><span class="line">    pthread_mutex_t mutex;  //声明pthread_mutex_t的结构</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation MYPOSIXViewController</span><br><span class="line">- (void)dealloc&#123;</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);  //释放该锁的数据结构</span><br><span class="line">&#125;</span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    // Do any additional setup after loading the view.</span><br><span class="line">    pthread_mutex_init(&amp;mutex, NULL);</span><br><span class="line">    /**</span><br><span class="line">     *  初始化</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)getIamgeName:(NSMutableArray *)imageNames&#123;</span><br><span class="line">    NSString *imageName;</span><br><span class="line">    /**</span><br><span class="line">     *  加锁</span><br><span class="line">     */</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    if (imageNames.count&gt;0) &#123;</span><br><span class="line">        imageName = [imageNames firstObject];</span><br><span class="line">        [imageNames removeObjectAtIndex:0];</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     *  解锁</span><br><span class="line">     */</span><br><span class="line">    pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>POSIX还可以创建条件锁，提供了和NSCondition一样的条件控制，初始化互斥锁同时使用pthread_cond_init来初始化条件数据结构，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 初始化</span><br><span class="line">    int pthread_cond_init (pthread_cond_t *cond, pthread_condattr_t *attr);</span><br><span class="line"></span><br><span class="line">    // 等待（会阻塞）</span><br><span class="line">    int pthread_cond_wait (pthread_cond_t *cond, pthread_mutex_t *mut);</span><br><span class="line"></span><br><span class="line">    // 定时等待</span><br><span class="line">    int pthread_cond_timedwait (pthread_cond_t *cond, pthread_mutex_t *mut, const struct timespec *abstime);</span><br><span class="line"></span><br><span class="line">    // 唤醒</span><br><span class="line">    int pthread_cond_signal (pthread_cond_t *cond);</span><br><span class="line"></span><br><span class="line">    // 广播唤醒</span><br><span class="line">    int pthread_cond_broadcast (pthread_cond_t *cond);</span><br><span class="line"></span><br><span class="line">    // 销毁</span><br><span class="line">    int pthread_cond_destroy (pthread_cond_t *cond);</span><br></pre></td></tr></table></figure>

<p>POSIX还提供了很多函数，有一套完整的API，包含Pthreads线程的创建控制等等，非常底层，可以手动处理线程的各个状态的转换即管理生命周期，甚至可以实现一套自己的多线程，感兴趣的可以继续深入了解。推荐一篇详细文章，但不是基于iOS的，是基于Linux的，但是介绍的非常详细 <a href="http://blog.chinaunix.net/uid-26885237-id-3207962.html">Linux 线程锁详解</a></p>
<hr>
<h1 id="自旋锁OSSpinLock"><a href="#自旋锁OSSpinLock" class="headerlink" title="自旋锁OSSpinLock"></a>自旋锁OSSpinLock</h1><p>首先要提的是OSSpinLock已经出现了BUG，导致并不能完全保证是线程安全的。</p>
<blockquote>
<p>新版 iOS 中，系统维护了 5 个不同的线程优先级&#x2F;QoS: background，utility，default，user-initiated，user-interactive。高优先级线程始终会在低优先级线程前执行，一个线程不会受到比它更低优先级线程的干扰。这种线程调度算法会产生潜在的优先级反转问题，从而破坏了 spin lock。</p>
<p>具体来说，如果一个低优先级的线程获得锁并访问共享资源，这时一个高优先级的线程也尝试获得这个锁，它会处于 spin lock 的忙等状态从而占用大量 CPU。此时低优先级线程无法与高优先级线程争夺 CPU 时间，从而导致任务迟迟完不成、无法释放 lock。这并不只是理论上的问题，libobjc 已经遇到了很多次这个问题了，于是苹果的工程师停用了 OSSpinLock。</p>
</blockquote>
<blockquote>
<p>苹果工程师 Greg Parker 提到，对于这个问题，一种解决方案是用 truly unbounded backoff 算法，这能避免 livelock 问题，但如果系统负载高时，它仍有可能将高优先级的线程阻塞数十秒之久；另一种方案是使用 handoff lock 算法，这也是 libobjc 目前正在使用的。锁的持有者会把线程 ID 保存到锁内部，锁的等待者会临时贡献出它的优先级来避免优先级反转的问题。理论上这种模式会在比较复杂的多锁条件下产生问题，但实践上目前还一切都好。</p>
</blockquote>
<blockquote>
<p>OSSpinLock 自旋锁，性能最高的锁。原理很简单，就是一直 do while 忙等。它的缺点是当等待时会消耗大量 CPU 资源，所以它不适用于较长时间的任务。对于内存缓存的存取来说，它非常合适。</p>
<p>-摘自<a href="http://blog.ibireme.com/author/ibireme/">ibireme</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;libkern/OSAtomic.h&gt;</span><br><span class="line"></span><br><span class="line">#import &lt;libkern/OSAtomic.h&gt;</span><br><span class="line">@interface MYOSSpinLockViewController ()</span><br><span class="line">&#123;</span><br><span class="line">    OSSpinLock spinlock;  //声明pthread_mutex_t的结构</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation MYOSSpinLockViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    // Do any additional setup after loading the view.</span><br><span class="line">    spinlock = OS_SPINLOCK_INIT;</span><br><span class="line">    /**</span><br><span class="line">     *  初始化</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)getIamgeName:(NSMutableArray *)imageNames&#123;</span><br><span class="line">    NSString *imageName;</span><br><span class="line">    /**</span><br><span class="line">     *  加锁</span><br><span class="line">     */</span><br><span class="line">    OSSpinLockLock(&amp;spinlock);</span><br><span class="line">    if (imageNames.count&gt;0) &#123;</span><br><span class="line">        imageName = [imageNames firstObject];</span><br><span class="line">        [imageNames removeObjectAtIndex:0];</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     *  解锁</span><br><span class="line">     */</span><br><span class="line">    OSSpinLockUnlock(&amp;spinlock);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<h1 id="自旋锁os-unfair-lock"><a href="#自旋锁os-unfair-lock" class="headerlink" title="自旋锁os_unfair_lock"></a>自旋锁os_unfair_lock</h1><p>由于OSSpinLock的线程安全问题，Apple已经在iOS10废弃了OSSpinLock自旋锁，取而代之的是os_unfair_lock，虽然os_unfair_lock是线程安全的，但代价就是os_unfair_lock的性能效果相对于OSSpinLock大打折扣</p>
<p>os_unfair_lock用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;os/lock.h&gt;</span><br><span class="line">// 初始化</span><br><span class="line"> os_unfair_lock unfair_lock = OS_UNFAIR_LOCK_INIT;</span><br><span class="line">// 加锁</span><br><span class="line">os_unfair_lock_lock(&amp;unfair_lock);</span><br><span class="line">// 解锁</span><br><span class="line">os_unfair_lock_unlock(&amp;unfair_lock);</span><br><span class="line">// 尝试加锁，可以加锁则立即加锁并返回 YES,反之返回 NO</span><br><span class="line">os_unfair_lock_trylock(&amp;unfair_lock);</span><br><span class="line">/*</span><br><span class="line">注:解决不同优先级的线程申请锁的时候不会发生优先级反转问题.</span><br><span class="line">不过相对于 OSSpinLock , os_unfair_lock性能方面减弱了许多.</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>@synchronized：适用线程不多，任务量不大的多线程加锁；</strong></p>
<p><strong>NSLock：其实NSLock并没有想象中的那么差，不知道大家为什么不推荐使用；</strong></p>
<p><strong>dispatch_semaphore_t：使用信号来做加锁，性能提升显著；</strong></p>
<p><strong>NSCondition：使用其做多线程之间的通信调用不是线程安全的；</strong></p>
<p><strong>NSConditionLock：单纯加锁性能非常低，比NSLock低很多，但是可以用来做多线程处理不同任务的通信调用；</strong></p>
<p><strong>NSRecursiveLock：递归锁的性能出奇的高，但是只能作为递归使用,所以限制了使用场景；</strong></p>
<p><strong>NSDistributedLock：因为是MAC开发的，就不讨论了；</strong></p>
<p><strong>POSIX(pthread_mutex)：底层的api，复杂的多线程处理建议使用，并且可以封装自己的多线程；</strong></p>
<p><strong>OSSpinLock：性能也非常高，可惜出现了线程问题；</strong></p>
<p><strong>os_unfair_lock iOS10以后用于替代OSSpinLock的另外一种自旋锁，线程安全，性能相对于OSSpinLock大打折扣</strong></p>
<p><strong>dispatch_barrier_async&#x2F;dispatch_barrier_sync：测试中发现dispatch_barrier_sync比dispatch_barrier_async性能要高，真是大出意外。</strong></p>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>iOS线程锁</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS底层之Block</title>
    <url>/2018/06/22/iOS%E5%BA%95%E5%B1%82%E4%B9%8BBlock/</url>
    <content><![CDATA[<ul>
<li>在此之前需要先了解一个概念 - 闭包（swift中叫闭包），在维基百科中，闭包的定义如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In programming languages, a closure is a function or reference to a function together with a referencing</span><br><span class="line">environment—a table storing a reference to each of the non-local variables (also called free variables </span><br><span class="line">or upvalues) of that function.</span><br></pre></td></tr></table></figure>

<p>实际上就是一个指向函数的指针。而block实际上就是一个闭包。</p>
<hr>
<span id="more"></span>

<h1 id="block的数据结构"><a href="#block的数据结构" class="headerlink" title="block的数据结构"></a>block的数据结构</h1><ul>
<li>在讲解block之前，我们先需要知道block的数据结构，鉴于苹果block和runtime的开源，block的源代码可以再<br><a href="https://opensource.apple.com/tarballs/libclosure/">libclosure</a><br>找得到，大约在源码中的runtime.c的第44行可以找到如下定义：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define BLOCK_DESCRIPTOR_1 1</span><br><span class="line">struct Block_descriptor_1 &#123;</span><br><span class="line">    uintptr_t reserved;</span><br><span class="line">    uintptr_t size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>第64行中找到block的数据布局：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct Block_layout &#123;</span><br><span class="line">    void *isa;</span><br><span class="line">    volatile int32_t flags; // contains ref count</span><br><span class="line">    int32_t reserved; </span><br><span class="line">    void (*invoke)(void *, ...);</span><br><span class="line">    struct Block_descriptor_1 *descriptor;</span><br><span class="line">    // imported variables</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>根据runtime.c中的对象定义，凡是首地址为*isa的结构体指针，都认为是对象。然而在OC中，block其实也被默认定义为对象。</p>
<p>通过上面的2附图其实我们可以知道，一个block实际上是由6部分组成：</p>
<blockquote>
<p>1、isa指针，所有对象都有一个isa指针，上面也讲到过了，它用于实现对象的一些相关的功能；<br>2、flags，用于按bit位表示的block的附加信息，后面讲block为什么要用copy的时候会讲到；<br>3、reserved，保留的变量；<br>4、invoke，函数指针，用于具体指向block内部实现的函数的调用地址；<br>5、descriptor，表示该block的附加描述信息；<br>6、variables，捕获过来的变量，block之所以能够访问外部的局部变量，是因为将这些变量或者变量的地址拷贝到了这个block的结构体中</p>
</blockquote>
<p>写一个简单的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void foo_()&#123;</span><br><span class="line">    int i = 2;</span><br><span class="line">    NSNumber *num = @3;</span><br><span class="line"></span><br><span class="line">    long (^myBlock)(void) = ^long() &#123;</span><br><span class="line">        return i * num.intValue;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    long r = myBlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在终端中用clang进行反编译会得到如下的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct __block_impl &#123;</span><br><span class="line">    void *isa;</span><br><span class="line">    int Flags;</span><br><span class="line">    int Reserved;</span><br><span class="line">    void *FuncPtr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct __foo_block_desc_0 &#123;</span><br><span class="line">    size_t reserved;</span><br><span class="line">    size_t Block_size;</span><br><span class="line">    void (*copy)(struct __foo_block_impl_0*, struct __foo_block_impl_0*);</span><br><span class="line">    void (*dispose)(struct __foo_block_impl_0*);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//myBlock的数据结构定义</span><br><span class="line">struct __foo_block_impl_0 &#123;</span><br><span class="line">    struct __block_impl impl;</span><br><span class="line">    struct __foo_block_desc_0* Desc;</span><br><span class="line">    int i;</span><br><span class="line">    NSNumber *num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//block数据的描述</span><br><span class="line">static struct __foo_block_desc_0 __foo_block_desc_0_DATA = &#123;</span><br><span class="line">    0,</span><br><span class="line">    sizeof(struct __foo_block_impl_0),</span><br><span class="line">    __foo_block_copy_0,</span><br><span class="line">    __foo_block_dispose_0</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//block中的方法</span><br><span class="line">static long __foo_block_func_0(struct __foo_block_impl_0 *__cself) &#123;</span><br><span class="line">    int i = __cself-&gt;i; // bound by copy</span><br><span class="line">    NSNumber *num = __cself-&gt;num; // bound by copy</span><br><span class="line">    return i * num.intValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void foo()&#123;</span><br><span class="line">    int i = 2;</span><br><span class="line">    NSNumber *num = @3;</span><br><span class="line">    struct __foo_block_impl_0 myBlockT;</span><br><span class="line">    struct __foo_block_impl_0 *myBlock = &amp;myBlockT;</span><br><span class="line">    myBlock-&gt;impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    myBlock-&gt;impl.Flags = 570425344;</span><br><span class="line">    myBlock-&gt;impl.FuncPtr = __foo_block_func_0;</span><br><span class="line">    myBlock-&gt;Desc = &amp;__foo_block_desc_0_DATA;</span><br><span class="line">    myBlock-&gt;i = i;</span><br><span class="line">    myBlock-&gt;num = num;</span><br><span class="line">    long r = myBlock-&gt;impl.FuncPtr(myBlock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>编译器会根据block捕获的变量，生成具体的结构体定义。block内部的代码将会提取出来，成为一个单独的C函数，创建block时实际上会在实现方法中声明一个结构体（struct），并且初始化该结构体的成员变量。而在执行block时会去调用这个单独的C函数，并把该结构体的指针传递过去。</strong></p>
</blockquote>
<hr>
<h1 id="block定义的类型"><a href="#block定义的类型" class="headerlink" title="block定义的类型"></a>block定义的类型</h1><p>在libclosure的block.h（在data.c中也可以找得到）的源码中，我们可以找到block定义的类型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void * _NSConcreteStackBlock[32] = &#123; 0 &#125;;</span><br><span class="line">void * _NSConcreteMallocBlock[32] = &#123; 0 &#125;;</span><br><span class="line">void * _NSConcreteAutoBlock[32] = &#123; 0 &#125;;</span><br><span class="line">void * _NSConcreteFinalizingBlock[32] = &#123; 0 &#125;;</span><br><span class="line">void * _NSConcreteGlobalBlock[32] = &#123; 0 &#125;;</span><br><span class="line">void * _NSConcreteWeakBlockVariable[32] = &#123; 0 &#125;;</span><br></pre></td></tr></table></figure>

<p>在C语言中定义了6中block，然而在OC当中的block只有3种类型，即：</p>
<ul>
<li><p>NSConcreteStackBlock 定义为栈上创建的block</p>
</li>
<li><p>NSConcreteMallocBlock 定义为堆上创建的block</p>
</li>
<li><p>NSConcreteGlobalBlock 作为全局变量的block</p>
</li>
</ul>
<p>PS：在最新的源码中_NSConcreteStackBlock和_NSConcreteGlobalBlock已经被废弃，取而代之的是是_NSConcreteAutoBlock,可能是由于ARC自动管理block内存的原因。</p>
<h2 id="全局的block"><a href="#全局的block" class="headerlink" title="全局的block"></a>全局的block</h2><p>前面已经提到过</p>
<blockquote>
<p><strong>在编译器完成编译之后，block会将其内部的代码全部提取出来，形成一个单独的C语言函数，在创建block时实际上它就是在方法声实现中声明一个结构体，并初始化该结构体的成员变量。而在执行block时，会去调用这个单独的C语言函数，并把该结构体的指针传递过去</strong></p>
</blockquote>
<p>于是全局的block就由此而生，其效果就相当于C语言中的匿名函数，因为全局的block是当一个block内部没有捕获任何外部变量时，就会使一个全局的block类型，此时，他就是一个函数，所以他也具备函数的一些特性，当调用block是后面会加上小括号：block()。</p>
<p>那么既然全局的block具有函数的特性，就不必在考虑其生命周期（函数是一执行完就被释放）</p>
<hr>
<h2 id="栈中的block"><a href="#栈中的block" class="headerlink" title="栈中的block"></a>栈中的block</h2><p>这个block其实是在编译器发现block内部调用或者说引用了外部的一些变量之后才生成的block。</p>
<blockquote>
<p><strong>在block内部有引用外部变量是，当block内部的结构体第一次被创建时，它会存在与该函数的函数调用栈中，其捕获的变量是会赋值到结构体的成员变量中的，所以当block完成初始化之后是不能更改其内部变量的，所以就知道为什么需要改变block内部的变量需要用到 __block了。</strong></p>
</blockquote>
<blockquote>
<p><strong>当函数调用结束或者返回时，函数的调用栈就会被销毁，这时block的内存也会被销毁，所以如果后续仍然需要使用这个block的时候，就必须将block以Block_Copy()的方法拷贝到堆上。也就是直接在堆上面申请内存，将block复制过去，最后在捕获到的对象发送retain，增加block的引用计数，保证block在堆上不被释放掉。</strong></p>
</blockquote>
<p>举个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int a = 100;</span><br><span class="line">    void (^block2)(void) = ^&#123;</span><br><span class="line">        printf(&quot;%d\n&quot;, a);</span><br><span class="line">    &#125;;</span><br><span class="line">    block2();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>让clang反编译重写之后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct __main_block_impl_0 &#123;</span><br><span class="line">    struct __block_impl impl;</span><br><span class="line">    struct __main_block_desc_0* Desc;</span><br><span class="line">    int a;</span><br><span class="line">    __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _a, int flags=0) : a(_a) &#123;</span><br><span class="line">        impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">        impl.Flags = flags;</span><br><span class="line">        impl.FuncPtr = fp;</span><br><span class="line">        Desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">    int a = __cself-&gt;a; // bound by copy</span><br><span class="line">    printf(&quot;%d\n&quot;, a);</span><br><span class="line">&#125;</span><br><span class="line">static struct __main_block_desc_0 &#123;</span><br><span class="line">    size_t reserved;</span><br><span class="line">    size_t Block_size;</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0)&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a = 100;</span><br><span class="line">    void (*block2)(void) = (void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, a);</span><br><span class="line">    ((void (*)(__block_impl *))((__block_impl *)block2)-&gt;FuncPtr)((__block_impl *)block2);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="堆中的block"><a href="#堆中的block" class="headerlink" title="堆中的block"></a>堆中的block</h2><blockquote>
<p><strong>在栈中的block提到过，当函数调用结束，函数的调用栈会被销毁，那么栈中的block也会被销毁，但是我们一般都需要在函数结束之后任然使用这个block，所以就需要把栈中的block拷贝到堆上，在copy的同时，栈上的block的类型就转换成了堆上的block。</strong></p>
</blockquote>
<blockquote>
<p><strong>所以，在MRC时代，block的属性关键字必须是copy。这样就能保证再给block的属性复制的时候，能把栈上的block复制到堆上。</strong></p>
</blockquote>
<hr>
<h1 id="ARC时代的block之循环引用"><a href="#ARC时代的block之循环引用" class="headerlink" title="ARC时代的block之循环引用"></a>ARC时代的block之循环引用</h1><p>在开启ARC后，block的内存会比较微妙。ARC会自动处理block的内存，不用手动copy&#x2F;release。</p>
<p>但是，和非ARC的情况有所不同：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void (^aBlock)(void);</span><br><span class="line">aBlock = ^&#123; </span><br><span class="line">	printf(&quot;ok&quot;); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>block是对象，所以aBlock默认是有__strong修饰符的，即aBlock对该block有strong references。即aBlock在被赋值的那一刻，这个block会被copy。所以，ARC开启后，所能接触到的block基本都是在堆上的。。</p>
<p>当block被copy之后(如开启了ARC、或把block放入dispatch queue)，该block对它捕获的对象产生strong references (非ARC下是retain)，所以有时需要避免block copy后产生的循环引用。</p>
<p>如果用self引用了block，block又捕获了self，这样就会有循环引用。<br>因此，需要用weak来声明self</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)configureBlock &#123;</span><br><span class="line">    XYZBlockKeeper * __weak weakSelf = self;</span><br><span class="line">    self.block = ^&#123;</span><br><span class="line">        [weakSelf doSomething]; //捕获到的是弱引用</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果捕获到的是当前对象的成员变量对象，同样也会造成对self的引用，同样也要避免。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)configureBlock &#123;</span><br><span class="line">    id tmpIvar = _ivar; //临时变量,避免了self引用</span><br><span class="line">    self.block = ^&#123;</span><br><span class="line">        [tmpIvar msg];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了避免循环引用，可以这样理解block：block就是一个对象，它捕获到的值就是这个对象的@property (strong)。</p>
]]></content>
      <categories>
        <category>底层原理</category>
      </categories>
      <tags>
        <tag>底层原理</tag>
        <tag>Block</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】iOS进程间是如何通信的</title>
    <url>/2019/03/12/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91iOS%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B-%E9%97%B4%E6%98%AF%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%A1%E7%9A%84/</url>
    <content><![CDATA[<h1 id="总起"><a href="#总起" class="headerlink" title="总起"></a>总起</h1><p>OS X是MacOS与NeXTSTEP的结合。OC是Smalltalk类面向对象编程与C的结合。iCloud则是苹果移动服务与云平台的结合。</p>
<p>上述都是一些亮点，但是不得不说苹果技术中的进程通讯走的是“反人类”的道路。</p>
<p>由于不是根据每个节点上最优原则进行设计，苹果的进程间通信解决方案更显得混乱扎堆。结果是，大量重叠，不兼容的IPC技术在各个抽象层随处可见。（除了GCD还有剪贴板）</p>
<ul>
<li>Mach Ports</li>
<li>Distributed Notifications</li>
<li>Distributed Objects</li>
<li>AppleEvents &amp; AppleScript</li>
<li>Pasteboard</li>
<li>XPC</li>
</ul>
<p>从低级内核抽象到高级，面向对象的API，它们都有各自特殊的表现以及安全特性。但是基础层面来看，它们都是从不同上下文段传递或者获取数据的机制。</p>
<span id="more"></span>

<p><a href="https://nshipster.com/inter-process-communication/">原文链接</a>    <a href="https://segmentfault.com/a/1190000002400329">转载自此处</a></p>
<h1 id="Mach-Ports"><a href="#Mach-Ports" class="headerlink" title="Mach Ports"></a>Mach Ports</h1><p>所有的进程间通讯最终落实依赖的还是Mach内核API提供的功能。</p>
<p>Mach端口是轻量并且强大的而又缺少相关文档晦涩使用的（天使与恶魔）。</p>
<p>通过一个Mach端口发送一个消息调用一次mach_msg_send方法，但是这里需要做一些配置来构建待发送的消息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">natural_t data;</span><br><span class="line">mach_port_t port;</span><br><span class="line"></span><br><span class="line">struct &#123;</span><br><span class="line">    mach_msg_header_t header;</span><br><span class="line">    mach_msg_body_t body;</span><br><span class="line">    mach_msg_type_descriptor_t type;</span><br><span class="line">&#125; message;</span><br><span class="line"></span><br><span class="line">message.header = (mach_msg_header_t) &#123;</span><br><span class="line">    .msgh_remote_port = port,</span><br><span class="line">    .msgh_local_port = MACH_PORT_NULL,</span><br><span class="line">    .msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0),</span><br><span class="line">    .msgh_size = sizeof(message)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message.body = (mach_msg_body_t) &#123;</span><br><span class="line">    .msgh_descriptor_count = 1</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message.type = (mach_msg_type_descriptor_t) &#123;</span><br><span class="line">    .pad1 = data,</span><br><span class="line">    .pad2 = sizeof(data)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">mach_msg_return_t error = mach_msg_send(&amp;message.header);</span><br><span class="line"></span><br><span class="line">if (error == MACH_MSG_SUCCESS) &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（消息）接收端稍微轻松点，因为消息只需要被声明而不用初始化：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mach_port_t port;</span><br><span class="line"></span><br><span class="line">struct &#123;</span><br><span class="line">    mach_msg_header_t header;</span><br><span class="line">    mach_msg_body_t body;</span><br><span class="line">    mach_msg_type_descriptor_t type;</span><br><span class="line">    mach_msg_trailer_t trailer;</span><br><span class="line">&#125; message;</span><br><span class="line"></span><br><span class="line">mach_msg_return_t error = mach_msg_receive(&amp;message.header);</span><br><span class="line"></span><br><span class="line">if (error == MACH_MSG_SUCCESS) &#123;</span><br><span class="line">    natural_t data = message.type.pad1;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还算不错的是，Core Foundation和Foundation为Mach端口提供了高级API。在内核基础上封装的CFMachPort &#x2F; NSMachPort可以用做runloop源，尽管CFMachPort &#x2F; NSMachPort有利于的是两个不同端口之间的通讯同步。</p>
<p>CFMessagePort确实非常适合用于简单的一对一通讯。简简单单几行代码，一个本地端口就被附属到runloop源上，只要获取到消息就执行回调。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static CFDataRef Callback(CFMessagePortRef port,</span><br><span class="line">                          SInt32 messageID,</span><br><span class="line">                          CFDataRef data,</span><br><span class="line">                          void *info)</span><br><span class="line">&#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CFMessagePortRef localPort =</span><br><span class="line">    CFMessagePortCreateLocal(nil,</span><br><span class="line">                             CFSTR(&quot;com.example.app.port.server&quot;),</span><br><span class="line">                             Callback,</span><br><span class="line">                             nil,</span><br><span class="line">                             nil);</span><br><span class="line"></span><br><span class="line">CFRunLoopSourceRef runLoopSource =</span><br><span class="line">    CFMessagePortCreateRunLoopSource(nil, localPort, 0);</span><br><span class="line"></span><br><span class="line">CFRunLoopAddSource(CFRunLoopGetCurrent(),</span><br><span class="line">                   runLoopSource,</span><br><span class="line">                   kCFRunLoopCommonModes);</span><br></pre></td></tr></table></figure>

<p>若要进行发送数据同样也十分直截了当。只要完成指定远端的端口，装载数据，还有设置发送与接收的超时时间的操作。剩下就由CFMessagePortSendRequest来接管了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CFDataRef data;</span><br><span class="line">SInt32 messageID = 0x1111; // Arbitrary</span><br><span class="line">CFTimeInterval timeout = 10.0;</span><br><span class="line"></span><br><span class="line">CFMessagePortRef remotePort =</span><br><span class="line">    CFMessagePortCreateRemote(nil,</span><br><span class="line">                              CFSTR(&quot;com.example.app.port.client&quot;));</span><br><span class="line"></span><br><span class="line">SInt32 status =</span><br><span class="line">    CFMessagePortSendRequest(remotePort,</span><br><span class="line">                             messageID,</span><br><span class="line">                             data,</span><br><span class="line">                             timeout,</span><br><span class="line">                             timeout,</span><br><span class="line">                             NULL,</span><br><span class="line">                             NULL);</span><br><span class="line">if (status == kCFMessagePortSuccess) &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Distributed-Notifications"><a href="#Distributed-Notifications" class="headerlink" title="Distributed Notifications"></a>Distributed Notifications</h1><p>在Cocoa中有很多种两个对象进行通信的途径。</p>
<p>当然也能进行直接消息传递。也有像目标-动作，代理，回调这些解耦，一对一的设计模式。KVO允许让很多对象订阅一个事件，但是它把这些对象都联系起来了。另一方面通知让消息全局广播，并且让有监听该广播的对象接收该消息。【注：想知道发了多少次广播吗？添加 NSNotificationCenter addObserverForName:object:queue:usingBlock，其中name与object置nil，看block被调用了几次。】</p>
<p>每个应用为基础应用消息发布-订阅对自身通知中心实例进行管理。但是鲜有人知的APICFNotificationCenterGetDistributedCenter的通知可以进行系统级别范围的通信。</p>
<p>为了获取通知，添加所要指定监听消息名的观察者到通知发布中心，当消息接收到的时候函数指针指向的函数将被执行一次：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static void Callback(CFNotificationCenterRef center,</span><br><span class="line">                     void *observer,</span><br><span class="line">                     CFStringRef name,</span><br><span class="line">                     const void *object,</span><br><span class="line">                     CFDictionaryRef userInfo)</span><br><span class="line">&#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CFNotificationCenterRef distributedCenter =</span><br><span class="line">    CFNotificationCenterGetDistributedCenter();</span><br><span class="line"></span><br><span class="line">CFNotificationSuspensionBehavior behavior =</span><br><span class="line">        CFNotificationSuspensionBehaviorDeliverImmediately;</span><br><span class="line"></span><br><span class="line">CFNotificationCenterAddObserver(distributedCenter,</span><br><span class="line">                                NULL,</span><br><span class="line">                                Callback,</span><br><span class="line">                                CFSTR(&quot;notification.identifier&quot;),</span><br><span class="line">                                NULL,</span><br><span class="line">                                behavior);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>发送端代码更为简单，只要配置好ID,对象还有user info：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void *object;</span><br><span class="line">CFDictionaryRef userInfo;</span><br><span class="line"></span><br><span class="line">CFNotificationCenterRef distributedCenter =</span><br><span class="line">    CFNotificationCenterGetDistributedCenter();</span><br><span class="line"></span><br><span class="line">CFNotificationCenterPostNotification(distributedCenter,</span><br><span class="line">                                     CFSTR(&quot;notification.identifier&quot;),</span><br><span class="line">                                     object,</span><br><span class="line">                                     userInfo,</span><br><span class="line">                                     true);</span><br></pre></td></tr></table></figure>

<p>链接两个应用通信的方式中，分发式通知是最为简单的。用它来进行大量数据的传输是不明智的，但是对于轻量级信息同步，分发式通知堪称完美。</p>
<h1 id="Distributed-Objects"><a href="#Distributed-Objects" class="headerlink" title="Distributed Objects"></a>Distributed Objects</h1><p>90年代中NeXT全盛时期，分发式对象（DO）是Cocoa框架中一个远程消息发送特性。尽管现在已经不再大范围的使用，在现代奇数层上IPC无障碍通信仍然并未实现。</p>
<p>使用DO分发一个对象仅仅是搭建一个NSConnection并将其注册为特殊（你分的清楚）的名字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@protocol Protocol;</span><br><span class="line"></span><br><span class="line">id &lt;Protocol&gt; vendedObject;</span><br><span class="line"></span><br><span class="line">NSConnection *connection = [[NSConnection alloc] init];</span><br><span class="line">[connection setRootObject:vendedObject];</span><br><span class="line">[connection registerName:@&quot;server&quot;];</span><br></pre></td></tr></table></figure>

<p>另外一个应用将会也建立同样名字的并注册过的链接，然后立即获取一个原子代理当做原始对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id proxy = [NSConnection rootProxyForConnectionWithRegisteredName:@&quot;server&quot; host:nil];</span><br><span class="line">[proxy setProtocolForProxy:@protocol(Protocol)];</span><br></pre></td></tr></table></figure>

<p>只要分发对象代理收到消息了，一个通过NSConnection连接远程调用（RPC）将会根据发送对象进行对应的计算并且返回结果给代理。【注：原理是一个OS管理的共享的NSPortNameServer实例对这个带着名字的连接进行管控。】</p>
<p>分发式对象简单，透明，健壮。简直就是Cocoa中的标杆。。。</p>
<p>实际上，分布式对象不能像局部对象那样使用，那就是因为任何发送给代理的消息都可能抛出异常。不想其他语言，OC没有异常处理控制流程。所以对任何东西都进行@try&#x2F;@catch也算是Cocoa大会很凄凉的补救了。</p>
<p>DO还有一个原因致其使用不便。在试图通过连接“marshal values”时，对象和原语的差距尤为明显。<br>此外，连接是完全加密的，和下方通信信道扩展性的缺乏致使其在大多数的使用中通信被迫中断。</p>
<p>下方是左列分布式对象用来指定其属性代理行为和方法参数的注解：</p>
<ul>
<li>in：输入参数，后续不再引用</li>
<li>out：参数被引用作为返回值</li>
<li>inout：输入参数，引用作为返回值</li>
<li>const：常量参数</li>
<li>oneway：无障碍结果返回</li>
<li>bycopy：返回对象的拷贝</li>
<li>byref：返回对象的代理</li>
</ul>
<h1 id="AppleEvents-AppleScript"><a href="#AppleEvents-AppleScript" class="headerlink" title="AppleEvents &amp; AppleScript"></a>AppleEvents &amp; AppleScript</h1><p>AppleEvents是经典Macintosh操作系统最持久的遗产。在System 7推出的AppleEvents允许应用程序在本地使用AppleScript或者使用程序链接的功能进行程序控制。现在AppleScript使用Cocoa Scripting Bridge，仍然是OS X应用进程间最直接的交互方式。【注：Mac系统的苹果时间管理中心为AppleEvents提供了原始低级传送机制，但是是在OS X的Mach端口基础之上的重实现】。</p>
<p>也就是说，使用起来这是简单而又古怪的技术之一。</p>
<p>AppleScript使用自然语言语法，设计初衷是没有涉及参数而更容易掌握。虽然与人交流更亲和了，但是写起来确实噩梦。</p>
<p>为了更好的了解人类自然性，这里有个栗子教你怎么让Safari在最前的窗口的激活栏打开一个URL。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tell application &quot;Safari&quot;</span><br><span class="line">  set the URL of the front document to &quot;http://nshipster.com&quot;</span><br><span class="line">end tell</span><br></pre></td></tr></table></figure>

<p>在大部分情况下，AppleScript的语法自然语言的特性更多是不便不是优势。（吐槽。。。略略略）</p>
<p>即便是经验老道的OC开发者，不靠文档或者栗子写出AppleScript是不可能的任务。</p>
<p>幸运的是，Scripting Bridge为Cocoa应用提供了更友善的编程接口。</p>
<h1 id="Cocoa-Scripting-Bridge"><a href="#Cocoa-Scripting-Bridge" class="headerlink" title="Cocoa Scripting Bridge"></a>Cocoa Scripting Bridge</h1><p>为了使用Scripting Bridge与应用进行交互，首先要先添加一个编程接口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sdef /Applications/Safari.app | sdp -fh --basename Safari</span><br></pre></td></tr></table></figure>

<p>sdef为应用生成脚本定义文件。这些文件可以以管道输入道sdp并格式转成（在这里是）C头文件。这样的结果是添加该头文件到应用工程并提供第一类对象接口。</p>
<p>这里举个栗子来解释如何使用Cocoa Scripting Bridge：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &quot;Safari.h&quot;</span><br><span class="line"></span><br><span class="line">SafariApplication *safari = [SBApplication applicationWithBundleIdentifier:@&quot;com.apple.Safari&quot;];</span><br><span class="line"></span><br><span class="line">for (SafariWindow *window in safari.windows) &#123;</span><br><span class="line">    if (window.visible) &#123;</span><br><span class="line">        window.currentTab.URL = [NSURL URLWithString:@&quot;http://nshipster.com&quot;];</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对比AppleScript上面显得冗繁了点，但是却更容易集成到已存在的代码中去。在可读性上更优因为毕竟长得更像OC。</p>
<p>唉，AppleScript的星芒也正出现消退，在最近发布的OS X与iWork应用证答复减少它的戏份。从这点说，未必值得在你的应用中去添加这项（脚本）支持。</p>
<h1 id="Pasteboard"><a href="#Pasteboard" class="headerlink" title="Pasteboard"></a>Pasteboard</h1><p>剪贴板是OS X与iOS最常见的进程间通信机制。当用户跨应用拷贝了一段文字，图片，文档，这时候通过mach port的com.apple.pboard服务媒介进行从一个进程到另一个进程的数据交换。</p>
<p>OS X上是NSPasteboard，iOS上对应的是UIPasteboard。它们几乎是别无二致，但尽管大致一样，对比OS X iOS上提供了更简洁，更现代化却又不影响功效的API。</p>
<p>编写剪贴板代码几乎就跟在GUI应用上使用Edit &gt; Copy操作一样简单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NSImage *image;</span><br><span class="line"></span><br><span class="line">NSPasteboard *pasteboard = [NSPasteboard generalPasteboard];</span><br><span class="line">[pasteboard clearContents];</span><br><span class="line">[pasteboard writeObjects:@[image]];</span><br></pre></td></tr></table></figure>

<p>因为剪贴动作太频繁了，所以要确认剪贴内容是否是你（应用）所需要得：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NSPasteboard *pasteboard = [NSPasteboard generalPasteboard];</span><br><span class="line"></span><br><span class="line">if ([pasteboard canReadObjectForClasses:@[[NSImage class]] options:nil]) &#123;</span><br><span class="line">    NSArray *contents = [pasteboard readObjectsForClasses:@[[NSImage class]] options: nil];</span><br><span class="line">    NSImage *image = [contents firstObject];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="XPC"><a href="#XPC" class="headerlink" title="XPC"></a>XPC</h1><p>XPC是SDK中最先进的进程间通讯技术。它架构之初的目的在于避免长时间得运行过程，来适应有限的资源，在可能运行的时候才进行初始化。把XPC纳入应用而不做任何事情的想法是不现实的，但这样提供了更好的进程间的特权分离和故障隔离。</p>
<p>XPC作为NSTask替代品甚至更多。</p>
<p>2011推出以来，XPC为OS X上的应用沙盒提供基础设施，iOS上的远程试图控制器，还有两个平台上的应用扩展。它还广范围的用在系统框架和第一方应用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ find /Applications -name \*.xpc</span><br></pre></td></tr></table></figure>

<p>控制台输入上面的命令行你会知道XPC无处不在。在一般应用中同样的情形也在发生，比如图片或者视频转变服务，系统调用，网页服务加载，或是第三方的授权。</p>
<p>XPC负责进程间通讯的同时还负责该服务生命周期的管理。包括注册服务，启动，以及通过launchd解决服务之间的通讯。一个XPC服务可以根据需求地洞，或者在崩溃的时候重启，或者是空闲的时候终止。正因如此，服务可以完全被设计成无状态的，以便于在运行的任何时间点的突然终止都能做到影响不大。</p>
<p>作为被iOS还有OS X中backported所采用的安全模块，XPC服务默认运行在最为严格的环境：不能访问文件，不能访问网络，没有根权限升级。任何能做的事情就是对照被赋予的白名单列表。</p>
<p>XPC可以被libxpc C API访问，或者是NSXPCConnection OC API。【注：作者会用低级API去实现（纯C）】</p>
<p>XPC服务要么存在于应用的沙盒中亦或是使用launchd调用跑在后台。</p>
<p>服务调用带事件句柄的xpc_main来获取新的XPC连接。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static void connection_handler(xpc_connection_t peer) &#123;</span><br><span class="line">    xpc_connection_set_event_handler(peer, ^(xpc_object_t event) &#123;</span><br><span class="line">        peer_event_handler(peer, event);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    xpc_connection_resume(peer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char *argv[]) &#123;</span><br><span class="line">   xpc_main(connection_handler);</span><br><span class="line">   exit(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每个XPC连接是一对一的，意味着服务在不同的连接进行操作，每次调用xpc_connection_create就会创建一个新的链接。【注：类似BSD套接字中的API accept函数，服务在单个文件描述符进行监听来为范围内的链接创建额外描述符】：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xpc_connection_t c = xpc_connection_create(&quot;com.example.service&quot;, NULL);</span><br><span class="line">xpc_connection_set_event_handler(c, ^(xpc_object_t event) &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;);</span><br><span class="line">xpc_connection_resume(c);</span><br></pre></td></tr></table></figure>

<p>当一个消息发送到XPC链接，将自动的派发到一个由runtime管理的消息队列中。当链接的远端一旦开启的时候，消息将出队并被发送。</p>
<p>每个消息就是一个字典，字符串key和强类型值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xpc_dictionary_t message = xpc_dictionary_create(NULL, NULL, 0);</span><br><span class="line">xpc_dictionary_set_uint64(message, &quot;foo&quot;, 1);</span><br><span class="line">xpc_connection_send_message(c, message);</span><br><span class="line">xpc_release(message)</span><br></pre></td></tr></table></figure>

<p>XPC对象对下列原始类型进行操作：</p>
<ul>
<li>Data</li>
<li>Boolean</li>
<li>Double</li>
<li>String</li>
<li>Signed Integer</li>
<li>Unsigned Integer</li>
<li>Date</li>
<li>UUID</li>
<li>Array</li>
<li>Dictionary</li>
<li>Null</li>
</ul>
<p>XPC提供了一个便捷的方法来从dispatch_data_t数据类型进行转换，这样从GCD到XPC的工作流程就简化了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void *buffer;</span><br><span class="line">size_t length;</span><br><span class="line">dispatch_data_t ddata =</span><br><span class="line">    dispatch_data_create(buffer,</span><br><span class="line">                         length,</span><br><span class="line">                         DISPATCH_TARGET_QUEUE_DEFAULT,</span><br><span class="line">                         DISPATCH_DATA_DESTRUCTOR_MUNMAP);</span><br><span class="line"></span><br><span class="line">xpc_object_t xdata = xpc_data_create_with_dispatch_data(ddata);</span><br></pre></td></tr></table></figure>

<h1 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h1><p>XPC可以注册成启动项任务，配置成匹配IOKit事件自动启动，BSD通知或者是CFDistributedNotifications。这些标准都指定在服务的launchd.plist文件里：<br>.launchd.plist</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;LaunchEvents&lt;/key&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">  &lt;key&gt;com.apple.iokit.matching&lt;/key&gt;</span><br><span class="line">  &lt;dict&gt;</span><br><span class="line">      &lt;key&gt;com.example.device-attach&lt;/key&gt;</span><br><span class="line">      &lt;dict&gt;</span><br><span class="line">          &lt;key&gt;idProduct&lt;/key&gt;</span><br><span class="line">          &lt;integer&gt;2794&lt;/integer&gt;</span><br><span class="line">          &lt;key&gt;idVendor&lt;/key&gt;</span><br><span class="line">          &lt;integer&gt;725&lt;/integer&gt;</span><br><span class="line">          &lt;key&gt;IOProviderClass&lt;/key&gt;</span><br><span class="line">          &lt;string&gt;IOUSBDevice&lt;/string&gt;</span><br><span class="line">          &lt;key&gt;IOMatchLaunchStream&lt;/key&gt;</span><br><span class="line">          &lt;true/&gt;</span><br><span class="line">          &lt;key&gt;ProcessType&lt;/key&gt;</span><br><span class="line">          &lt;string&gt;Adaptive&lt;/string&gt;</span><br><span class="line">      &lt;/dict&gt;</span><br><span class="line">  &lt;/dict&gt;</span><br><span class="line">&lt;/dict&gt;</span><br></pre></td></tr></table></figure>

<p>最近一次对于launchd属性列表的修改是增加了ProcessType Key，其用来在高级层面上描述启动机构的预期目的。根据预描述行为期望，操作系统会响应调整CPU和I&#x2F;O的阈值。</p>
<p><img src="/.io//articlex.png" alt="图片描述"></p>
<p>为了注册一个服务运行大概五分钟的时间，一套标准需要传送给xpc_activity_register：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xpc_object_t criteria = xpc_dictionary_create(NULL, NULL, 0);</span><br><span class="line">xpc_dictionary_set_int64(criteria, XPC_ACTIVITY_INTERVAL, 5 * 60);</span><br><span class="line">xpc_dictionary_set_int64(criteria, XPC_ACTIVITY_GRACE_PERIOD, 10 * 60);</span><br><span class="line"></span><br><span class="line">xpc_activity_register(&quot;com.example.app.activity&quot;,</span><br><span class="line">                      criteria,</span><br><span class="line">                      ^(xpc_activity_t activity)</span><br><span class="line">&#123;</span><br><span class="line">    // Process Data</span><br><span class="line"></span><br><span class="line">    xpc_activity_set_state(activity, XPC_ACTIVITY_STATE_CONTINUE);</span><br><span class="line"></span><br><span class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        // Update UI</span><br><span class="line"></span><br><span class="line">        xpc_activity_set_state(activity, XPC_ACTIVITY_STATE_DONE);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>底层原理</category>
      </categories>
      <tags>
        <tag>底层原理</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS底层之RunLoop</title>
    <url>/2018/04/20/iOS%E5%BA%95%E5%B1%82%E4%B9%8BRunLoop/</url>
    <content><![CDATA[<p>runloop在iOS开发中是一个十分基础的概念，本文将从CFRunLoop入手，介绍runloop的概念和底层实现原理。然后介绍Apple是如何通过runloop在处理一些列的触摸事件和方法回调以及自动释放池等功能的。文中部分内容来自<a href="http://blog.ibireme.com/2015/05/18/runloop/">此博客</a>。</p>
<span id="more"></span>
<hr>
<h1 id="RunLoop的概念"><a href="#RunLoop的概念" class="headerlink" title="RunLoop的概念"></a>RunLoop的概念</h1><p>一般来讲，一个线程一次只能执行一次任务，任务完成之后线程就会退出，但是如果一种这种机制，让一条线程既能处理事件又不退出，通常会设置一个无线的死循环，让这条线程在里面跑而不退出，一般的代码可以这样写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function loop() &#123;</span><br><span class="line">    initialize();</span><br><span class="line">    do &#123;</span><br><span class="line">        var message = get_next_message();</span><br><span class="line">        process_message(message);</span><br><span class="line">    &#125; while (message != quit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这种模型我们通常称之为event loop。这种事件的处理模型在很多开发中都有，比如安卓开发中也有类似的loop循环，Windows的程序的循环消息，iOS&#x2F;OSX的runloop等等。</p>
<p>所以runloop实际上也是一个对象，这个对象处理了很多东西，触摸事件和方法回调，并提供一个入口函数来执行event loop逻辑，线程执行完毕之后会一直处于“接收消息 - 等待 - 处理”的循环之中，直到这个循环结束，函数返回。</p>
<p>在iOS&#x2F;OSX中提供了两种这样的对象：NSRunLoop和CFRunLoopRef。其中NSRunLoop是基于CFRunLoopRef的第二层封装，更加面向对象，但是NSRunLoop的API的线程是不安全的。</p>
<p>而CFRunLoopRef是在CoreFoundation的框架内的，它提供了纯C语言的API，所以这些API的线程是安全的。CFRunLoopRef 的代码是<a href="http://opensource.apple.com/source/CF/CF-855.17/CFRunLoop.c">开源</a>的，你可以在这里<a href="http://opensource.apple.com/tarballs/CF/">http://opensource.apple.com/tarballs/CF/</a>下载到整个CoreFoundation 的源码来查看。</p>
<hr>
<h1 id="RunLoop与线程的关系"><a href="#RunLoop与线程的关系" class="headerlink" title="RunLoop与线程的关系"></a>RunLoop与线程的关系</h1><p>线程和RunLoop是一一对应的关系，每一条线程都有与之对应的RunLoop，主线程的RunLoop是在程序启动时就已经开启，而其他线程在被创建时并不会开启RunLoop，如果子线程不主动去开启RunLoop，那他将一直不会有。RunLoop的创建发生在第一次获取时，销毁时发生在线程结束时。只能在一条线程内部获取其RunLoop。</p>
<hr>
<h1 id="RunLoop对外的接口"><a href="#RunLoop对外的接口" class="headerlink" title="RunLoop对外的接口"></a>RunLoop对外的接口</h1><p>在CoreFoundation框架中，提供了RunLoop的5种类：</p>
<ul>
<li>CFRunLoopRef</li>
<li>CFRunLoopModeRef</li>
<li>CFRunLoopSourceRef</li>
<li>CFRunLoopTimerRef</li>
</ul>
<h2 id="CFRunLoopModeRef"><a href="#CFRunLoopModeRef" class="headerlink" title="CFRunLoopModeRef"></a>CFRunLoopModeRef</h2><p>其中，CFRunLoopModeRef并没有对外暴露接口，只是通过CFRunLoopRef对其接口进行封装，其关系如下：</p>
<p><img src="/.io//RunLoop_0.png"></p>
<p>一个RunLoop的包含若干个Mode，每个Mode又包含若干个source&#x2F;timer&#x2F;observer，每次调用RunLoop的主函数时，只能指定其中一个Mode，而这个Mode又被称之为currentMode。如果需要切换Mode只能退出当前的loop再重新指定一个Mode进入。这样做的目的是为了分隔开不同的source&#x2F;timer&#x2F;observer，让其相互之间互不影响。</p>
<h2 id="CFRunLoopSourceRef"><a href="#CFRunLoopSourceRef" class="headerlink" title="CFRunLoopSourceRef"></a>CFRunLoopSourceRef</h2><p>CFRunLoopSourceRef是事件产生的地方。source主要有2个版本：source0和source1，</p>
<ul>
<li>Source0 只包含了一个函数指针的回调，它并不能主动触发事件。使用时，你需要先调用CFRunLoopSourceSignal(source)，将这个Source标记为待处理，然后手动调用CFRunLoopWakeUp(runloop)来唤醒RunLoop，让其处理这个事件。</li>
<li>Source1 包含了 一个mach_port和一个函数的回调指针，被用于通过内核和其他线程相互发送消息。source1可以主动唤醒RunLoop的线程。</li>
</ul>
<h3 id="CFRunLoopTimerRef"><a href="#CFRunLoopTimerRef" class="headerlink" title="CFRunLoopTimerRef"></a>CFRunLoopTimerRef</h3><p>CFRunLoopTimerRef是基于时间的触时发器，它和NSTimer可以混用。其中包含了一个时间的长度和一个函数的指针回调。当加入RunLoop时，RunLoop会注册对应的时间点，当时间点到时，RunLoop会被唤醒以执行此回调。</p>
<blockquote>
<p>这里补充一个知识点，就是为什么NSTimer会不准的原因</p>
<p>首先我们知道，NSTimer是基于toll-free bridged的，严格来说NSTimer不是一个基于真实时间的机制，NSTimer被触发需要满足以下3个条件，</p>
<p>第一、NSTimer被添加到指定的RunLoop的Mode中；</p>
<p>第二、该Mode在RunLoop中正在运行；</p>
<p>第三、达到触发的时间，因为RunLoop需要管理大量的资源，为了提高NSTimer的效率，时间的间隔被限制为50-100毫秒比较合理，直到下一次RunLoop检测到NSTimer才会被触发</p>
<p>在苹果开发者文档中可以查看到，<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-131281">参考</a></p>
<p>即使NSTimer会基于时间发出通知，但是由于NSTimer不是一个基于真实时间的机制。和输入源一样，timer和指定Mode的RunLoop紧密相连。如果没有被当前的Mode的RunLoop监测到，timer就不会被触发，直到timer指定的Mode的RunLoop运行时才会被触发。类似的，当timer被触发的时间达到，而RunLoop却又恰好正在执行一个handler句柄，那么timer就不会被触发，而是等到下次的触发时间点通过RunLoop来唤醒timer执行回调操作。如果RunLoop不再运行，那么timer就永远不会被触发</p>
</blockquote>
<h3 id="CFRunLoopObserverRef"><a href="#CFRunLoopObserverRef" class="headerlink" title="CFRunLoopObserverRef"></a>CFRunLoopObserverRef</h3><p>CFRunLoopObserverRef是RunLoop的观察者，每一个Observer都包含一个回调的函数指针，当RunLoop的状态发生变化时，观察者j就能通过回调接收到这个变化，在CFRunLoopRef的源码中，可以发现观察RunLoop的还时间点主要有以下几种：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) &#123;</span><br><span class="line">    kCFRunLoopEntry         = (1UL &lt;&lt; 0), // 即将进入Loop</span><br><span class="line">    kCFRunLoopBeforeTimers  = (1UL &lt;&lt; 1), // 即将处理 Timer</span><br><span class="line">    kCFRunLoopBeforeSources = (1UL &lt;&lt; 2), // 即将处理 Source</span><br><span class="line">    kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5), // 即将进入休眠</span><br><span class="line">    kCFRunLoopAfterWaiting  = (1UL &lt;&lt; 6), // 刚从休眠中唤醒</span><br><span class="line">    kCFRunLoopExit          = (1UL &lt;&lt; 7), // 即将退出Loop</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面的Source&#x2F;Timer&#x2F;Observer被统称为Mode item，一个item可以同时加入多个Mode，但是一个item被重复加入同一个Mode将不会有效果。如果一个Mode中不包含其中任何一个item则RunLoop会直接退出，不再循环。</p>
<hr>
<h2 id="RunLoop的Mode"><a href="#RunLoop的Mode" class="headerlink" title="RunLoop的Mode"></a>RunLoop的Mode</h2><p>CFRunLoopMode和CFRunLoop的结构大致如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct __CFRunLoopMode &#123;</span><br><span class="line">    CFStringRef _name;            // Mode Name, 例如 @&quot;kCFRunLoopDefaultMode&quot;</span><br><span class="line">    CFMutableSetRef _sources0;    // Set</span><br><span class="line">    CFMutableSetRef _sources1;    // Set</span><br><span class="line">    CFMutableArrayRef _observers; // Array</span><br><span class="line">    CFMutableArrayRef _timers;    // Array</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct __CFRunLoop &#123;</span><br><span class="line">    CFMutableSetRef _commonModes;     // Set</span><br><span class="line">    CFMutableSetRef _commonModeItems; // Set&lt;Source/Observer/Timer&gt;</span><br><span class="line">    CFRunLoopModeRef _currentMode;    // Current Runloop Mode</span><br><span class="line">    CFMutableSetRef _modes;           // Set</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>此处有个概念叫“CommonModes”：一个Mode可以将自己标记为“Common”属性（通过将它的ModeName添加到RunLoop的commonModes中）。每个RunLoop的内容发生变化时，RunLoop都会自动将_commonModeItems里的Source&#x2F;Observer&#x2F;Timer同步到具有common标记的Mode里。</p>
<p>例如：主线程的RunLoop里面有两个预置的Mode，即kCFRunLoopDefaultMode和UITrackingRunLoopMode。这两个Mode都已经被标记为common属性。defaultMode是APP平时所处的状态，TrackingRunLoopMode是已经追到ScrollView的滑动时的状态。当你创建一个Timer，并且添加到DefaultMode时，timer会得到重复的回调，但当此时滑动一个tableview或者scrollview时，RunLoop会将Mode切换为trackingRunLoopMode，此时这个timer将不会再被回调，并且也不会影响到滑动的操作。</p>
<p>所以，有时候你需要一个timer，在这两种Mode之间回调，一种办法就是将这个timer分别加入到这两种Mode。另外一种方式就是将这个timer加入到顶层的RunLoop的commonModeitems中。这个commonModeItems将会被更新到所有具有common的标记的属性的Mode中。</p>
<p>CFRunLoop对外暴露的接口只有以下2个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CFRunLoopAddCommonMode(CFRunLoopRef runloop, CFStringRef modeName);</span><br><span class="line">CFRunLoopRunInMode(CFStringRef modeName, ...);</span><br></pre></td></tr></table></figure>

<p>Mode 暴露的管理 mode item 的接口有下面几个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef modeName);</span><br><span class="line">CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFStringRef modeName);</span><br><span class="line">CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFStringRef mode);</span><br><span class="line">CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef modeName);</span><br><span class="line">CFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFStringRef modeName);</span><br><span class="line">CFRunLoopRemoveTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFStringRef mode);</span><br></pre></td></tr></table></figure>

<p>你只能通过 mode name 来操作内部的 mode，当你传入一个新的 mode name 但 RunLoop 内部没有对应 mode 时，RunLoop会自动帮你创建对应的 CFRunLoopModeRef。对于一个 RunLoop 来说，其内部的 mode 只能增加不能删除。</p>
<p>苹果公开提供的 Mode 有两个：kCFRunLoopDefaultMode (NSDefaultRunLoopMode) 和 UITrackingRunLoopMode，你可以用这两个 Mode Name 来操作其对应的 Mode。</p>
<p>同时苹果还提供了一个操作 Common 标记的字符串：kCFRunLoopCommonModes (NSRunLoopCommonModes)，你可以用这个字符串来操作 Common Items，或标记一个 Mode 为 “Common”。使用时注意区分这个字符串和其他 mode name。</p>
<hr>
<h1 id="RunLoop-的内部逻辑"><a href="#RunLoop-的内部逻辑" class="headerlink" title="RunLoop 的内部逻辑"></a>RunLoop 的内部逻辑</h1><p>根据苹果在<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW23">文档</a>里的说明，RunLoop 内部的逻辑大致如下:</p>
<p><img src="/.io//RunLoop_1.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/// 用DefaultMode启动</span><br><span class="line">void CFRunLoopRun(void) &#123;</span><br><span class="line">    CFRunLoopRunSpecific(CFRunLoopGetCurrent(), kCFRunLoopDefaultMode, 1.0e10, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// 用指定的Mode启动，允许设置RunLoop超时时间</span><br><span class="line">int CFRunLoopRunInMode(CFStringRef modeName, CFTimeInterval seconds, Boolean stopAfterHandle) &#123;</span><br><span class="line">    return CFRunLoopRunSpecific(CFRunLoopGetCurrent(), modeName, seconds, returnAfterSourceHandled);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// RunLoop的实现</span><br><span class="line">int CFRunLoopRunSpecific(runloop, modeName, seconds, stopAfterHandle) &#123;</span><br><span class="line"></span><br><span class="line">    /// 首先根据modeName找到对应mode</span><br><span class="line">    CFRunLoopModeRef currentMode = __CFRunLoopFindMode(runloop, modeName, false);</span><br><span class="line">    /// 如果mode里没有source/timer/observer, 直接返回。</span><br><span class="line">    if (__CFRunLoopModeIsEmpty(currentMode)) return;</span><br><span class="line"></span><br><span class="line">    /// 1. 通知 Observers: RunLoop 即将进入 loop。</span><br><span class="line">    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopEntry);</span><br><span class="line"></span><br><span class="line">    /// 内部函数，进入loop</span><br><span class="line">    __CFRunLoopRun(runloop, currentMode, seconds, returnAfterSourceHandled) &#123;</span><br><span class="line"></span><br><span class="line">        Boolean sourceHandledThisLoop = NO;</span><br><span class="line">        int retVal = 0;</span><br><span class="line">        do &#123;</span><br><span class="line"></span><br><span class="line">            /// 2. 通知 Observers: RunLoop 即将触发 Timer 回调。</span><br><span class="line">            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);</span><br><span class="line">            /// 3. 通知 Observers: RunLoop 即将触发 Source0 (非port) 回调。</span><br><span class="line">            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);</span><br><span class="line">            /// 执行被加入的block</span><br><span class="line">            __CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class="line"></span><br><span class="line">            /// 4. RunLoop 触发 Source0 (非port) 回调。</span><br><span class="line">            sourceHandledThisLoop = __CFRunLoopDoSources0(runloop, currentMode, stopAfterHandle);</span><br><span class="line">            /// 执行被加入的block</span><br><span class="line">            __CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class="line"></span><br><span class="line">            /// 5. 如果有 Source1 (基于port) 处于 ready 状态，直接处理这个 Source1 然后跳转去处理消息。</span><br><span class="line">            if (__Source0DidDispatchPortLastTime) &#123;</span><br><span class="line">                Boolean hasMsg = __CFRunLoopServiceMachPort(dispatchPort, &amp;msg)</span><br><span class="line">                if (hasMsg) goto handle_msg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            /// 通知 Observers: RunLoop 的线程即将进入休眠(sleep)。</span><br><span class="line">            if (!sourceHandledThisLoop) &#123;</span><br><span class="line">                __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            /// 7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒。</span><br><span class="line">            /// • 一个基于 port 的Source 的事件。</span><br><span class="line">            /// • 一个 Timer 到时间了</span><br><span class="line">            /// • RunLoop 自身的超时时间到了</span><br><span class="line">            /// • 被其他什么调用者手动唤醒</span><br><span class="line">            __CFRunLoopServiceMachPort(waitSet, &amp;msg, sizeof(msg_buffer), &amp;livePort) &#123;</span><br><span class="line">                mach_msg(msg, MACH_RCV_MSG, port); // thread wait for receive msg</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            /// 8. 通知 Observers: RunLoop 的线程刚刚被唤醒了。</span><br><span class="line">            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);</span><br><span class="line"></span><br><span class="line">            /// 收到消息，处理消息。</span><br><span class="line">            handle_msg:</span><br><span class="line"></span><br><span class="line">            /// 9.1 如果一个 Timer 到时间了，触发这个Timer的回调。</span><br><span class="line">            if (msg_is_timer) &#123;</span><br><span class="line">                __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())</span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">            /// 9.2 如果有dispatch到main_queue的block，执行block。</span><br><span class="line">            else if (msg_is_dispatch) &#123;</span><br><span class="line">                __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);</span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">            /// 9.3 如果一个 Source1 (基于port) 发出事件了，处理这个事件</span><br><span class="line">            else &#123;</span><br><span class="line">                CFRunLoopSourceRef source1 = __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);</span><br><span class="line">                sourceHandledThisLoop = __CFRunLoopDoSource1(runloop, currentMode, source1, msg);</span><br><span class="line">                if (sourceHandledThisLoop) &#123;</span><br><span class="line">                    mach_msg(reply, MACH_SEND_MSG, reply);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            /// 执行加入到Loop的block</span><br><span class="line">            __CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            if (sourceHandledThisLoop &amp;&amp; stopAfterHandle) &#123;</span><br><span class="line">                /// 进入loop时参数说处理完事件就返回。</span><br><span class="line">                retVal = kCFRunLoopRunHandledSource;</span><br><span class="line">            &#125; else if (timeout) &#123;</span><br><span class="line">                /// 超出传入参数标记的超时时间了</span><br><span class="line">                retVal = kCFRunLoopRunTimedOut;</span><br><span class="line">            &#125; else if (__CFRunLoopIsStopped(runloop)) &#123;</span><br><span class="line">                /// 被外部调用者强制停止了</span><br><span class="line">                retVal = kCFRunLoopRunStopped;</span><br><span class="line">            &#125; else if (__CFRunLoopModeIsEmpty(runloop, currentMode)) &#123;</span><br><span class="line">                /// source/timer/observer一个都没有了</span><br><span class="line">                retVal = kCFRunLoopRunFinished;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            /// 如果没超时，mode里没空，loop也没被停止，那继续loop。</span><br><span class="line">        &#125; while (retVal == 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 10. 通知 Observers: RunLoop 即将退出。</span><br><span class="line">    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，实际上 RunLoop 就是这样一个函数，其内部是一个 do-while 循环。当你调用 CFRunLoopRun() 时，线程就会一直停留在这个循环里；直到超时或被手动停止，该函数才会返回。</p>
<hr>
<h1 id="RunLoop-的底层实现"><a href="#RunLoop-的底层实现" class="headerlink" title="RunLoop 的底层实现"></a>RunLoop 的底层实现</h1><p>从上面代码可以看到，RunLoop 的核心是基于 mach port 的，其进入休眠时调用的函数是 mach_msg()。为了解释这个逻辑，下面稍微介绍一下 OSX&#x2F;iOS 的系统架构。</p>
<p><img src="/.io//RunLoop_3.png"></p>
<p>苹果官方将整个系统大致划分为上述4个层次：<br>应用层包括用户能接触到的图形应用，例如 Spotlight、Aqua、SpringBoard 等。<br>应用框架层即开发人员接触到的 Cocoa 等框架。<br>核心框架层包括各种核心框架、OpenGL 等内容。<br>Darwin 即操作系统的核心，包括系统内核、驱动、Shell 等内容，这一层是开源的，其所有源码都可以在<a href="http://opensource.apple.com/">opensource.apple.com</a>里找到。</p>
<p>我们在深入看一下 Darwin 这个核心的架构：</p>
<p><img src="/.io//RunLoop_4.png"></p>
<p>其中，在硬件层上面的三个组成部分：Mach、BSD、IOKit (还包括一些上面没标注的内容)，共同组成了 XNU 内核。<br>XNU 内核的内环被称作 Mach，其作为一个微内核，仅提供了诸如处理器调度、IPC (进程间通信)等非常少量的基础服务。<br>BSD 层可以看作围绕 Mach 层的一个外环，其提供了诸如进程管理、文件系统和网络等功能。<br>IOKit 层是为设备驱动提供了一个面向对象(C++)的一个框架。</p>
<p>Mach 本身提供的 API 非常有限，而且苹果也不鼓励使用 Mach 的 API，但是这些API非常基础，如果没有这些API的话，其他任何工作都无法实施。在 Mach 中，所有的东西都是通过自己的对象实现的，进程、线程和虚拟内存都被称为”对象”。和其他架构不同， Mach 的对象间不能直接调用，只能通过消息传递的方式实现对象间的通信。”消息”是 Mach 中最基础的概念，消息在两个端口 (port) 之间传递，这就是 Mach 的 IPC (进程间通信) 的核心。</p>
<p>Mach 的消息定义是在 &lt;mach&#x2F;message.h&gt;头文件的，很简单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">  mach_msg_header_t header;</span><br><span class="line">  mach_msg_body_t body;</span><br><span class="line">&#125; mach_msg_base_t;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">  mach_msg_bits_t msgh_bits;</span><br><span class="line">  mach_msg_size_t msgh_size;</span><br><span class="line">  mach_port_t msgh_remote_port;</span><br><span class="line">  mach_port_t msgh_local_port;</span><br><span class="line">  mach_port_name_t msgh_voucher_port;</span><br><span class="line">  mach_msg_id_t msgh_id;</span><br><span class="line">&#125; mach_msg_header_t;</span><br></pre></td></tr></table></figure>

<p>一条 Mach 消息实际上就是一个二进制数据包 (BLOB)，其头部定义了当前端口 local_port 和目标端口 remote_port，发送和接受消息是通过同一个 API 进行的，其 option 标记了消息传递的方向：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mach_msg_return_t mach_msg(</span><br><span class="line">            mach_msg_header_t *msg,</span><br><span class="line">            mach_msg_option_t option,</span><br><span class="line">            mach_msg_size_t send_size,</span><br><span class="line">            mach_msg_size_t rcv_size,</span><br><span class="line">            mach_port_name_t rcv_name,</span><br><span class="line">            mach_msg_timeout_t timeout,</span><br><span class="line">            mach_port_name_t notify);</span><br></pre></td></tr></table></figure>

<p>为了实现消息的发送和接收，mach_msg() 函数实际上是调用了一个 Mach 陷阱 (trap)，即函数mach_msg_trap()，陷阱这个概念在 Mach 中等同于系统调用。当你在用户态调用 mach_msg_trap() 时会触发陷阱机制，切换到内核态；内核态中内核实现的 mach_msg() 函数会完成实际的工作，</p>
<p>RunLoop 的核心就是一个 mach_msg() (见上面代码的第7步)，RunLoop 调用这个函数去接收消息，如果没有别人发送 port 消息过来，内核会将线程置于等待状态。例如你在模拟器里跑起一个 iOS 的 App，然后在 App 静止时点击暂停，你会看到主线程调用栈是停留在 mach_msg_trap() 这个地方。</p>
<p>关于具体的如何利用 mach port 发送信息，可以看看<a href="http://nshipster.com/inter-process-communication/">NSHipster 这一篇文章</a>，或者<a href="http://segmentfault.com/a/1190000002400329">这里</a>的中文翻译 。</p>
<p>关于Mach的历史可以看看这篇很有趣的文章：<a href="http://www.programmer.com.cn/8121/">Mac OS X 背后的故事（三）Mach 之父 Avie Tevanian</a>。</p>
<hr>
<h1 id="苹果用-RunLoop-实现的功能"><a href="#苹果用-RunLoop-实现的功能" class="headerlink" title="苹果用 RunLoop 实现的功能"></a>苹果用 RunLoop 实现的功能</h1><p>首先我们可以看一下 App 启动后 RunLoop 的状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CFRunLoop &#123;</span><br><span class="line">    current mode = kCFRunLoopDefaultMode</span><br><span class="line">    common modes = &#123;</span><br><span class="line">        UITrackingRunLoopMode</span><br><span class="line">        kCFRunLoopDefaultMode</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    common mode items = &#123;</span><br><span class="line"></span><br><span class="line">        // source0 (manual)</span><br><span class="line">        CFRunLoopSource &#123;order =-1, &#123;</span><br><span class="line">            callout = _UIApplicationHandleEventQueue&#125;&#125;</span><br><span class="line">        CFRunLoopSource &#123;order =-1, &#123;</span><br><span class="line">            callout = PurpleEventSignalCallback &#125;&#125;</span><br><span class="line">        CFRunLoopSource &#123;order = 0, &#123;</span><br><span class="line">            callout = FBSSerialQueueRunLoopSourceHandler&#125;&#125;</span><br><span class="line"></span><br><span class="line">        // source1 (mach port)</span><br><span class="line">        CFRunLoopSource &#123;order = 0,  &#123;port = 17923&#125;&#125;</span><br><span class="line">        CFRunLoopSource &#123;order = 0,  &#123;port = 12039&#125;&#125;</span><br><span class="line">        CFRunLoopSource &#123;order = 0,  &#123;port = 16647&#125;&#125;</span><br><span class="line">        CFRunLoopSource &#123;order =-1, &#123;</span><br><span class="line">            callout = PurpleEventCallback&#125;&#125;</span><br><span class="line">        CFRunLoopSource &#123;order = 0, &#123;port = 2407,</span><br><span class="line">            callout = _ZL20notify_port_callbackP12__CFMachPortPvlS1_&#125;&#125;</span><br><span class="line">        CFRunLoopSource &#123;order = 0, &#123;port = 1c03,</span><br><span class="line">            callout = __IOHIDEventSystemClientAvailabilityCallback&#125;&#125;</span><br><span class="line">        CFRunLoopSource &#123;order = 0, &#123;port = 1b03,</span><br><span class="line">            callout = __IOHIDEventSystemClientQueueCallback&#125;&#125;</span><br><span class="line">        CFRunLoopSource &#123;order = 1, &#123;port = 1903,</span><br><span class="line">            callout = __IOMIGMachPortPortCallback&#125;&#125;</span><br><span class="line"></span><br><span class="line">        // Ovserver</span><br><span class="line">        CFRunLoopObserver &#123;order = -2147483647, activities = 0x1, // Entry</span><br><span class="line">            callout = _wrapRunLoopWithAutoreleasePoolHandler&#125;</span><br><span class="line">        CFRunLoopObserver &#123;order = 0, activities = 0x20,          // BeforeWaiting</span><br><span class="line">            callout = _UIGestureRecognizerUpdateObserver&#125;</span><br><span class="line">        CFRunLoopObserver &#123;order = 1999000, activities = 0xa0,    // BeforeWaiting | Exit</span><br><span class="line">            callout = _afterCACommitHandler&#125;</span><br><span class="line">        CFRunLoopObserver &#123;order = 2000000, activities = 0xa0,    // BeforeWaiting | Exit</span><br><span class="line">            callout = _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv&#125;</span><br><span class="line">        CFRunLoopObserver &#123;order = 2147483647, activities = 0xa0, // BeforeWaiting | Exit</span><br><span class="line">            callout = _wrapRunLoopWithAutoreleasePoolHandler&#125;</span><br><span class="line"></span><br><span class="line">        // Timer</span><br><span class="line">        CFRunLoopTimer &#123;firing = No, interval = 3.1536e+09, tolerance = 0,</span><br><span class="line">            next fire date = 453098071 (-4421.76019 @ 96223387169499),</span><br><span class="line">            callout = _ZN2CAL14timer_callbackEP16__CFRunLoopTimerPv (QuartzCore.framework)&#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    modes ＝ &#123;</span><br><span class="line">        CFRunLoopMode  &#123;</span><br><span class="line">            sources0 =  &#123; /* same as &#x27;common mode items&#x27; */ &#125;,</span><br><span class="line">            sources1 =  &#123; /* same as &#x27;common mode items&#x27; */ &#125;,</span><br><span class="line">            observers = &#123; /* same as &#x27;common mode items&#x27; */ &#125;,</span><br><span class="line">            timers =    &#123; /* same as &#x27;common mode items&#x27; */ &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        CFRunLoopMode  &#123;</span><br><span class="line">            sources0 =  &#123; /* same as &#x27;common mode items&#x27; */ &#125;,</span><br><span class="line">            sources1 =  &#123; /* same as &#x27;common mode items&#x27; */ &#125;,</span><br><span class="line">            observers = &#123; /* same as &#x27;common mode items&#x27; */ &#125;,</span><br><span class="line">            timers =    &#123; /* same as &#x27;common mode items&#x27; */ &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        CFRunLoopMode  &#123;</span><br><span class="line">            sources0 = &#123;</span><br><span class="line">                CFRunLoopSource &#123;order = 0, &#123;</span><br><span class="line">                    callout = FBSSerialQueueRunLoopSourceHandler&#125;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            sources1 = (null),</span><br><span class="line">            observers = &#123;</span><br><span class="line">                CFRunLoopObserver &gt;&#123;activities = 0xa0, order = 2000000,</span><br><span class="line">                    callout = _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv&#125;</span><br><span class="line">            )&#125;,</span><br><span class="line">            timers = (null),</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        CFRunLoopMode  &#123;</span><br><span class="line">            sources0 = &#123;</span><br><span class="line">                CFRunLoopSource &#123;order = -1, &#123;</span><br><span class="line">                    callout = PurpleEventSignalCallback&#125;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            sources1 = &#123;</span><br><span class="line">                CFRunLoopSource &#123;order = -1, &#123;</span><br><span class="line">                    callout = PurpleEventCallback&#125;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            observers = (null),</span><br><span class="line">            timers = (null),</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        CFRunLoopMode  &#123;</span><br><span class="line">            sources0 = (null),</span><br><span class="line">            sources1 = (null),</span><br><span class="line">            observers = (null),</span><br><span class="line">            timers = (null),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，系统默认注册了5个Mode:</p>
<ol>
<li><p>kCFRunLoopDefaultMode: App的默认 Mode，通常主线程是在这个 Mode 下运行的。</p>
</li>
<li><p>UITrackingRunLoopMode: 界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响。</p>
</li>
<li><p>UIInitializationRunLoopMode: 在刚启动 App 时第进入的第一个 Mode，启动完成后就不再使用。</p>
</li>
</ol>
<p>4: GSEventReceiveRunLoopMode: 接受系统事件的内部 Mode，通常用不到。</p>
<p>5: kCFRunLoopCommonModes: 这是一个占位的 Mode，没有实际作用。</p>
<p>你可以在<a href="http://iphonedevwiki.net/index.php/CFRunLoop">这里</a>看到更多的苹果内部的 Mode，但那些 Mode 在开发中就很难遇到了。</p>
<p>当 RunLoop 进行回调时，一般都是通过一个很长的函数调用出去 (call out), 当你在你的代码中下断点调试时，通常能在调用栈上看到这些函数。下面是这几个函数的整理版本，如果你在调用栈中看到这些长函数名，在这里查找一下就能定位到具体的调用地点了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    /// 1. 通知Observers，即将进入RunLoop</span><br><span class="line">    /// 此处有Observer会创建AutoreleasePool: _objc_autoreleasePoolPush();</span><br><span class="line">    __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopEntry);</span><br><span class="line">    do &#123;</span><br><span class="line"></span><br><span class="line">        /// 2. 通知 Observers: 即将触发 Timer 回调。</span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeTimers);</span><br><span class="line">        /// 3. 通知 Observers: 即将触发 Source (非基于port的,Source0) 回调。</span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeSources);</span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);</span><br><span class="line"></span><br><span class="line">        /// 4. 触发 Source0 (非基于port的) 回调。</span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__(source0);</span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);</span><br><span class="line"></span><br><span class="line">        /// 6. 通知Observers，即将进入休眠</span><br><span class="line">        /// 此处有Observer释放并新建AutoreleasePool: _objc_autoreleasePoolPop(); _objc_autoreleasePoolPush();</span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeWaiting);</span><br><span class="line"></span><br><span class="line">        /// 7. sleep to wait msg.</span><br><span class="line">        mach_msg() -&gt; mach_msg_trap();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /// 8. 通知Observers，线程被唤醒</span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopAfterWaiting);</span><br><span class="line"></span><br><span class="line">        /// 9. 如果是被Timer唤醒的，回调Timer</span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__(timer);</span><br><span class="line"></span><br><span class="line">        /// 9. 如果是被dispatch唤醒的，执行所有调用 dispatch_async 等方法放入main queue 的 block</span><br><span class="line">        __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(dispatched_block);</span><br><span class="line"></span><br><span class="line">        /// 9. 如果如果Runloop是被 Source1 (基于port的) 的事件唤醒了，处理这个事件</span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__(source1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; while (...);</span><br><span class="line"></span><br><span class="line">    /// 10. 通知Observers，即将退出RunLoop</span><br><span class="line">    /// 此处有Observer释放AutoreleasePool: _objc_autoreleasePoolPop();</span><br><span class="line">    __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopExit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="AutoreleasePool"><a href="#AutoreleasePool" class="headerlink" title="AutoreleasePool"></a>AutoreleasePool</h1><p>App启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 _wrapRunLoopWithAutoreleasePoolHandler()。</p>
<p>第一个 Observer 监视的事件是 Entry(即将进入Loop)，其回调内会调用 _objc_autoreleasePoolPush() 创建自动释放池。其 order 是-2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。</p>
<p>第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用_objc_autoreleasePoolPop() 和 _objc_autoreleasePoolPush() 释放旧的池并创建新池；Exit(即将退出Loop) 时调用 _objc_autoreleasePoolPop() 来释放自动释放池。这个 Observer 的 order 是 2147483647，优先级最低，保证其释放池子发生在其他所有回调之后。</p>
<p>在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop 创建好的 AutoreleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。</p>
<hr>
<h1 id="事件响应"><a href="#事件响应" class="headerlink" title="事件响应"></a>事件响应</h1><p>苹果注册了一个 Source1 (基于 mach port 的) 用来接收系统事件，其回调函数为 __IOHIDEventSystemClientQueueCallback()。</p>
<p>当一个硬件事件(触摸&#x2F;锁屏&#x2F;摇晃等)发生后，首先由 IOKit.framework 生成一个 IOHIDEvent 事件并由 SpringBoard 接收。这个过程的详细情况可以参考<a href="http://iphonedevwiki.net/index.php/IOHIDFamily">这里</a>。SpringBoard 只接收按键(锁屏&#x2F;静音等)，触摸，加速，接近传感器等几种 Event，随后用 mach port 转发给需要的App进程。随后苹果注册的那个 Source1 就会触发回调，并调用 _UIApplicationHandleEventQueue() 进行应用内部的分发。</p>
<p>_UIApplicationHandleEventQueue() 会把 IOHIDEvent 处理并包装成 UIEvent 进行处理或分发，其中包括识别 UIGesture&#x2F;处理屏幕旋转&#x2F;发送给 UIWindow 等。通常事件比如 UIButton 点击、touchesBegin&#x2F;Move&#x2F;End&#x2F;Cancel 事件都是在这个回调中完成的。</p>
<hr>
<h1 id="手势识别"><a href="#手势识别" class="headerlink" title="手势识别"></a>手势识别</h1><p>当上面的 _UIApplicationHandleEventQueue() 识别了一个手势时，其首先会调用 Cancel 将当前的 touchesBegin&#x2F;Move&#x2F;End 系列回调打断。随后系统将对应的 UIGestureRecognizer 标记为待处理。</p>
<p>苹果注册了一个 Observer 监测 BeforeWaiting (Loop即将进入休眠) 事件，这个Observer的回调函数是 _UIGestureRecognizerUpdateObserver()，其内部会获取所有刚被标记为待处理的 GestureRecognizer，并执行GestureRecognizer的回调。</p>
<p>当有 UIGestureRecognizer 的变化(创建&#x2F;销毁&#x2F;状态改变)时，这个回调都会进行相应处理。</p>
<hr>
<h1 id="界面更新"><a href="#界面更新" class="headerlink" title="界面更新"></a>界面更新</h1><p>当在操作 UI 时，比如改变了 Frame、更新了 UIView&#x2F;CALayer 的层次时，或者手动调用了 UIView&#x2F;CALayer 的 setNeedsLayout&#x2F;setNeedsDisplay方法后，这个 UIView&#x2F;CALayer 就被标记为待处理，并被提交到一个全局的容器去。</p>
<p>苹果注册了一个 Observer 监听 BeforeWaiting(即将进入休眠) 和 Exit (即将退出Loop) 事件，回调去执行一个很长的函数：<br>_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()。这个函数里会遍历所有待处理的 UIView&#x2F;CAlayer 以执行实际的绘制和调整，并更新 UI 界面。</p>
<p>这个函数内部的调用栈大概是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()</span><br><span class="line">    QuartzCore:CA::Transaction::observer_callback:</span><br><span class="line">        CA::Transaction::commit();</span><br><span class="line">            CA::Context::commit_transaction();</span><br><span class="line">                CA::Layer::layout_and_display_if_needed();</span><br><span class="line">                    CA::Layer::layout_if_needed();</span><br><span class="line">                        [CALayer layoutSublayers];</span><br><span class="line">                            [UIView layoutSubviews];</span><br><span class="line">                    CA::Layer::display_if_needed();</span><br><span class="line">                        [CALayer display];</span><br><span class="line">                            [UIView drawRect];</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><p>NSTimer 其实就是 CFRunLoopTimerRef，他们之间是 toll-free bridged 的。一个 NSTimer 注册到 RunLoop 后，RunLoop 会为其重复的时间点注册好事件。例如 10:00, 10:10, 10:20 这几个时间点。RunLoop为了节省资源，并不会在非常准确的时间点回调这个Timer。Timer 有个属性叫做 Tolerance (宽容度)，标示了当时间点到后，容许有多少最大误差。</p>
<p>如果某个时间点被错过了，例如执行了一个很长的任务，则那个时间点的回调也会跳过去，不会延后执行。就比如等公交，如果 10:10 时我忙着玩手机错过了那个点的公交，那我只能等 10:20 这一趟了。</p>
<p>CADisplayLink 是一个和屏幕刷新率一致的定时器（但实际实现原理更复杂，和 NSTimer 并不一样，其内部实际是操作了一个 Source）。如果在两次屏幕刷新之间执行了一个长任务，那其中就会有一帧被跳过去（和 NSTimer 相似），造成界面卡顿的感觉。在快速滑动TableView时，即使一帧的卡顿也会让用户有所察觉。Facebook 开源的 AsyncDisplayLink 就是为了解决界面卡顿的问题，其内部也用到了 RunLoop，这个稍后我会再单独写一页博客来分析。</p>
<hr>
<h1 id="PerformSelecter"><a href="#PerformSelecter" class="headerlink" title="PerformSelecter"></a>PerformSelecter</h1><p>当调用 NSObject 的 performSelecter:afterDelay: 后，实际上其内部会创建一个 Timer 并添加到当前线程的 RunLoop 中。所以如果当前线程没有 RunLoop，则这个方法会失效。</p>
<p>当调用 performSelector:onThread: 时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 RunLoop 该方法也会失效。</p>
<hr>
<h1 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h1><p>实际上 RunLoop 底层也会用到 GCD 的东西，<del>比如 RunLoop 是用 dispatch_source_t 实现的 Timer</del>（评论中有人提醒，NSTimer 是用了 XNU 内核的 mk_timer，我也仔细调试了一下，发现 NSTimer 确实是由 mk_timer 驱动，而非 GCD 驱动的）。但同时 GCD 提供的某些接口也用到了 RunLoop， 例如 dispatch_async()。</p>
<p>当调用 dispatch_async(dispatch_get_main_queue(), block) 时，libDispatch 会向主线程的 RunLoop 发送消息，RunLoop会被唤醒，并从消息中取得这个 block，并在回调 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__() 里执行这个 block。但这个逻辑仅限于 dispatch 到主线程，dispatch 到其他线程仍然是由 libDispatch 处理的。</p>
<hr>
<h1 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h1><p>iOS 中，关于网络请求的接口自下至上有如下几层:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CFSocket</span><br><span class="line">CFNetwork       -&gt;ASIHttpRequest</span><br><span class="line">NSURLConnection -&gt;AFNetworking</span><br><span class="line">NSURLSession    -&gt;AFNetworking2, Alamofire</span><br></pre></td></tr></table></figure>

<p>CFSocket 是最底层的接口，只负责 socket 通信。</p>
<ul>
<li>CFNetwork 是基于 CFSocket 等接口的上层封装，ASIHttpRequest 工作于这一层。</li>
<li>NSURLConnection 是基于 CFNetwork 的更高层的封装，提供面向对象的接口，AFNetworking 工作于这一层。</li>
<li>NSURLSession 是 iOS7 中新增的接口，表面上是和 NSURLConnection 并列的，但底层仍然用到了 NSURLConnection 的部分功能 (比如 com.apple.NSURLConnectionLoader 线程)，AFNetworking2 和 Alamofire 工作于这一层。</li>
</ul>
<p>下面主要介绍下 NSURLConnection 的工作过程。</p>
<p>通常使用 NSURLConnection 时，你会传入一个 Delegate，当调用了 [connection start] 后，这个 Delegate 就会不停收到事件回调。实际上，start 这个函数的内部会会获取 CurrentRunLoop，然后在其中的 DefaultMode 添加了4个 Source0 (即需要手动触发的Source)。CFMultiplexerSource 是负责各种 Delegate 回调的，CFHTTPCookieStorage 是处理各种 Cookie 的。</p>
<p>当开始网络传输时，我们可以看到 NSURLConnection 创建了两个新线程：com.apple.NSURLConnectionLoader 和 com.apple.CFSocket.private。其中 CFSocket 线程是处理底层 socket 连接的。NSURLConnectionLoader 这个线程内部会使用 RunLoop 来接收底层 socket 的事件，并通过之前添加的 Source0 通知到上层的 Delegate。</p>
<p><img src="/.io//RunLoop_network.png">NSURLConnectionLoader 中的 RunLoop 通过一些基于 mach port 的 Source 接收来自底层 CFSocket 的通知。当收到通知后，其会在合适的时机向 CFMultiplexerSource 等 Source0 发送通知，同时唤醒 Delegate 线程的 RunLoop 来让其处理这些通知。CFMultiplexerSource 会在 Delegate 线程的 RunLoop 对 Delegate 执行实际的回调。</p>
]]></content>
      <categories>
        <category>底层原理</category>
      </categories>
      <tags>
        <tag>RunLoop</tag>
        <tag>底层原理</tag>
      </tags>
  </entry>
  <entry>
    <title>如何利用RunLoop的知识来监测APP卡顿?</title>
    <url>/2019/09/11/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8RunLoop%E7%9A%84%E7%9F%A5%E8%AF%86%E6%9D%A5%E7%9B%91%E6%B5%8BAPP%E5%8D%A1%E9%A1%BF/</url>
    <content><![CDATA[<p>卡顿问题，就是在主线程上无法响应用户交互的问题。如果一个 App 时不时地就给你卡一下，有时还长时间无响应，这时你还愿意继续用它吗？所以说，卡顿问题对 App 的伤害是巨大的</p>
<h2 id><a href="#" class="headerlink" title></a><span id="more"></span></h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用runloop来监测卡顿其实并不是什么比较前沿的技术，也不算什么新奇的技术，实际上开发者也用的比较少。一来，应为 <code>XCode</code> 的<code>instrument</code>足够的优秀，几乎所有的监控操作都有对应的工具。二来，大多数项目上都是集成第三方的统计工具，比如Bugly、友盟之类的等等。但是这样也暴露了一些问题，集成第三方会担心自己的APP信息泄露，那怎么办呢？所以这套自己通过runloop的检测也就营运而生。</p>
<h2 id="卡顿可能产生的原因"><a href="#卡顿可能产生的原因" class="headerlink" title="卡顿可能产生的原因"></a>卡顿可能产生的原因</h2><p>一般来讲卡顿产生的原因可以大致分为以下几种类型：</p>
<p>1、复杂 UI 、图文混排的绘制量过大；</p>
<p>2、在主线程上做网络同步请求；</p>
<p>4、在主线程做大量的 IO 操作；</p>
<p>4、运算量过大，CPU 持续高占用；死锁和主子线程抢锁</p>
<p>那么问题来了，我们如何来做卡顿的监测呢？只是单纯的检测FPS的波动吗？FPS又是什么呢？维基百科显示FPS，即每秒显示帧数 或者 每秒显示张数 - <a href="https://zh.wikipedia.org/wiki/%E5%B8%A7%E7%8E%87">影格率</a>测量单位（这里牵扯到CPU和GPU同步的问题，相关只是点就不在陈述了）。也就是说简单地通过监视 FPS 是很难确定是否会出现卡顿，所以FPS是不能作为用来检测卡顿的标准的。那我们应该通过什么来监测卡顿呢？</p>
<h2 id="关于RunLoop"><a href="#关于RunLoop" class="headerlink" title="关于RunLoop"></a>关于RunLoop</h2><p>对于iOS开发人员来说，runloop相信大家一定不会陌生，因为他是在日常开发中的一个基础概念，我们都知道，线程的消息事件是依赖于 RunLoop 的，所以从 RunLoop 入手，就可以知道主线程上都调用了哪些方法。我们通过监听 RunLoop 的状态，就能够发现调用方法是否执行时间过长，从而判断出是否会出现卡顿。</p>
<p>当然，如果你要在RunLoop中监测哪些方法的运行时间过长，首先你必须得清楚RunLoop的运行原理，知道了运行原理之后才能知道我们要在RunLoop的哪个环节进行监测。</p>
<h3 id="第一步：通知Observers：即将进入RunLoop"><a href="#第一步：通知Observers：即将进入RunLoop" class="headerlink" title="第一步：通知Observers：即将进入RunLoop"></a>第一步：通知Observers：即将进入RunLoop</h3><p>我们在<a href="http://opensource.apple.com/tarballs/CF/CF-1153.18.tar.gz">CFRunLoop-1153.18</a>的源码的第2676行中的<code>CFRunLoopRun(void)</code>中，开启一个<code>do..while</code>循环来保活</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void CFRunLoopRun(void) &#123;	/* DOES CALLOUT */</span><br><span class="line">    int32_t result;</span><br><span class="line">    do &#123;</span><br><span class="line">        result = CFRunLoopRunSpecific(CFRunLoopGetCurrent(), kCFRunLoopDefaultMode, 1.0e10, false);</span><br><span class="line">        CHECK_FOR_FORK();</span><br><span class="line">    &#125; while (kCFRunLoopRunStopped != result &amp;&amp; kCFRunLoopRunFinished != result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那我们的重点就在<code>CFRunLoopRunSpecific</code>这个方法内部是如何实现的了，我们接下来往下看。<code>CFRunLoopRunSpecific</code>是<code>runloop</code>的启动入口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//即将进入runloop</span><br><span class="line">if (currentMode-&gt;_observerMask &amp; kCFRunLoopEntry ) __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopEntry);</span><br><span class="line">result = __CFRunLoopRun(rl, currentMode, seconds, returnAfterSourceHandled, previousMode);</span><br><span class="line">if (currentMode-&gt;_observerMask &amp; kCFRunLoopExit ) __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);</span><br></pre></td></tr></table></figure>

<h3 id="第二步：通知Observers：即将处理Timers和即将处理Sources和blocks"><a href="#第二步：通知Observers：即将处理Timers和即将处理Sources和blocks" class="headerlink" title="第二步：通知Observers：即将处理Timers和即将处理Sources和blocks"></a>第二步：通知Observers：即将处理Timers和即将处理Sources和blocks</h3><p>触发times、source0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__CFRunLoopUnsetIgnoreWakeUps(rl);</span><br><span class="line">if (rlm-&gt;_observerMask &amp; kCFRunLoopBeforeTimers) __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeTimers);//即将处理Timers</span><br><span class="line">if (rlm-&gt;_observerMask &amp; kCFRunLoopBeforeSources) __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeSources);//即将处理Sources</span><br><span class="line">__CFRunLoopDoBlocks(rl, rlm);//处理blocks</span><br></pre></td></tr></table></figure>

<h3 id="第三步：处理-Source0"><a href="#第三步：处理-Source0" class="headerlink" title="第三步：处理 Source0"></a>第三步：处理 Source0</h3><p>到了这一步可能会再次处理一遍blocks</p>
<p>如果有 Source1 是 ready 状态的话，就会跳转到 handle_msg 去处理消息。代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> Boolean sourceHandledThisLoop = __CFRunLoopDoSources0(rl, rlm, stopAfterHandle);</span><br><span class="line">    if (sourceHandledThisLoop) &#123;</span><br><span class="line">    __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line">&#125;</span><br><span class="line">    Boolean poll = sourceHandledThisLoop || (0ULL == timeout_context-&gt;termTSR);</span><br><span class="line"></span><br><span class="line">    if (MACH_PORT_NULL != dispatchPort &amp;&amp; !didDispatchPortLastTime) &#123;</span><br><span class="line">#if DEPLOYMENT_TARGET_MACOSX || DEPLOYMENT_TARGET_EMBEDDED || DEPLOYMENT_TARGET_EMBEDDED_MINI</span><br><span class="line">       msg = (mach_msg_header_t *)msg_buffer;</span><br><span class="line">      //MachPort处于等待中，runloop则会去处理handle_msg</span><br><span class="line">       if (__CFRunLoopServiceMachPort(dispatchPort, &amp;msg, sizeof(msg_buffer), &amp;livePort, 0, &amp;voucherState, NULL)) &#123;</span><br><span class="line">           goto handle_msg;</span><br><span class="line">       &#125;</span><br><span class="line">#elif DEPLOYMENT_TARGET_WINDOWS</span><br><span class="line">       if (__CFRunLoopWaitForMultipleObjects(NULL, &amp;dispatchPort, 0, 0, &amp;livePort, NULL)) &#123;</span><br><span class="line">           goto handle_msg;</span><br><span class="line">       &#125;</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    didDispatchPortLastTime = false;</span><br></pre></td></tr></table></figure>

<h3 id="第四步：通知Observers：开始休眠（等待消息唤醒）"><a href="#第四步：通知Observers：开始休眠（等待消息唤醒）" class="headerlink" title="第四步：通知Observers：开始休眠（等待消息唤醒）"></a>第四步：通知Observers：开始休眠（等待消息唤醒）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//通知Observers：开始休眠</span><br><span class="line">if (!poll &amp;&amp; (rlm-&gt;_observerMask &amp; kCFRunLoopBeforeWaiting)) __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeWaiting);</span><br><span class="line">__CFRunLoopSetSleeping(rl);</span><br></pre></td></tr></table></figure>

<h3 id="第五步：通知Observers：结束休眠（被某个消息唤醒）"><a href="#第五步：通知Observers：结束休眠（被某个消息唤醒）" class="headerlink" title="第五步：通知Observers：结束休眠（被某个消息唤醒）"></a>第五步：通知Observers：结束休眠（被某个消息唤醒）</h3><p>RunLoop 被唤醒后就要开始处理消息了：（这一段代码太长，就不直接贴出来了）</p>
<ul>
<li><p>如果是 Timer 时间到的话，就触发 Timer 的回调；</p>
</li>
<li><p>处理 GCD Async To Main Queue；</p>
</li>
<li><p>如果是 source1(MachPor) 事件的话，就处理这个事件。</p>
</li>
<li><p>再次处理Blocks</p>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> DEPLOYMENT_TARGET_MACOSX || DEPLOYMENT_TARGET_EMBEDDED || DEPLOYMENT_TARGET_EMBEDDED_MINI</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> USE_DISPATCH_SOURCE_FOR_TIMERS</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (kCFUseCollectableAllocator) &#123;</span><br><span class="line">                <span class="comment">// objc_clear_stack(0);</span></span><br><span class="line">                <span class="comment">// &lt;rdar://problem/16393959&gt;</span></span><br><span class="line">                memset(msg_buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(msg_buffer));</span><br><span class="line">            &#125;</span><br><span class="line">            msg = (mach_msg_header_t *)msg_buffer;</span><br><span class="line">            __CFRunLoopServiceMachPort(waitSet, &amp;msg, <span class="keyword">sizeof</span>(msg_buffer), &amp;livePort, poll ? <span class="number">0</span> : TIMEOUT_INFINITY, &amp;voucherState, &amp;voucherCopy);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (modeQueuePort != MACH_PORT_NULL &amp;&amp; livePort == modeQueuePort) &#123;</span><br><span class="line">                <span class="comment">// Drain the internal queue. If one of the callout blocks sets the timerFired flag, break out and service the timer.</span></span><br><span class="line">                <span class="keyword">while</span> (_dispatch_runloop_root_queue_perform_4CF(rlm-&gt;_queue));</span><br><span class="line">                <span class="keyword">if</span> (rlm-&gt;_timerFired) &#123;</span><br><span class="line">                    <span class="comment">// Leave livePort as the queue port, and service timers below</span></span><br><span class="line">                    rlm-&gt;_timerFired = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (msg &amp;&amp; msg != (mach_msg_header_t *)msg_buffer) free(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Go ahead and leave the inner loop.</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">(省略)........</span><br></pre></td></tr></table></figure>

<h3 id="第六步：根据上一步的操作决定是退出runloop还是继续执行runloop"><a href="#第六步：根据上一步的操作决定是退出runloop还是继续执行runloop" class="headerlink" title="第六步：根据上一步的操作决定是退出runloop还是继续执行runloop"></a>第六步：根据上一步的操作决定是退出runloop还是继续执行runloop</h3><p>根据上一步的操作决定是退出runloop还是继续执行runloop</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (sourceHandledThisLoop &amp;&amp; stopAfterHandle) &#123;</span><br><span class="line">	    retVal = kCFRunLoopRunHandledSource;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeout_context-&gt;termTSR &lt; mach_absolute_time()) &#123;</span><br><span class="line">            retVal = kCFRunLoopRunTimedOut;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (__CFRunLoopIsStopped(rl)) &#123;</span><br><span class="line">            __CFRunLoopUnsetStopped(rl);</span><br><span class="line">	    retVal = kCFRunLoopRunStopped;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rlm-&gt;_stopped) &#123;</span><br><span class="line">	    rlm-&gt;_stopped = <span class="literal">false</span>;</span><br><span class="line">	    retVal = kCFRunLoopRunStopped;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (__CFRunLoopModeIsEmpty(rl, rlm, previousMode)) &#123;</span><br><span class="line">	    retVal = kCFRunLoopRunFinished;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="RunLoop的六个状态"><a href="#RunLoop的六个状态" class="headerlink" title="RunLoop的六个状态"></a>RunLoop的六个状态</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">CF_OPTIONS</span>(<span class="built_in">CFOptionFlags</span>, <span class="built_in">CFRunLoopActivity</span>) &#123;</span><br><span class="line">    kCFRunLoopEntry = (<span class="number">1</span>UL &lt;&lt; <span class="number">0</span>),						<span class="comment">//即将进入RunLoop</span></span><br><span class="line">    kCFRunLoopBeforeTimers = (<span class="number">1</span>UL &lt;&lt; <span class="number">1</span>),		<span class="comment">//即将处理Timers</span></span><br><span class="line">    kCFRunLoopBeforeSources = (<span class="number">1</span>UL &lt;&lt; <span class="number">2</span>),		<span class="comment">//即将处理Source</span></span><br><span class="line">    kCFRunLoopBeforeWaiting = (<span class="number">1</span>UL &lt;&lt; <span class="number">5</span>),		<span class="comment">//即将休眠</span></span><br><span class="line">    kCFRunLoopAfterWaiting = (<span class="number">1</span>UL &lt;&lt; <span class="number">6</span>),		<span class="comment">//即将唤醒</span></span><br><span class="line">    kCFRunLoopExit = (<span class="number">1</span>UL &lt;&lt; <span class="number">7</span>),						<span class="comment">//退出RunLoop</span></span><br><span class="line">    kCFRunLoopAllActivities = <span class="number">0x0FFFFFFF</span>U</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>用一张图概括RunLoop的运行轨迹</p>
<p><img src="/.io//5f51c5e05085badb689f01b1e63e1c7d.png" alt="runloop"></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>通过上面的runloop运行轨迹我们能够知道，RunLoop&#96;处理事件的时间主要出在两个阶段：</p>
<ul>
<li><code>kCFRunLoopBeforeSources</code>和<code>kCFRunLoopBeforeWaiting</code>之间</li>
<li><code>kCFRunLoopAfterWaiting</code>之后</li>
</ul>
<p>试想如果 RunLoop 的线程，进入睡眠前方法的执行时间过长而导致无法进入睡眠，或者线程唤醒后接收消息时间过长而无法进入下一步的话，就可以认为是线程受阻了。如果这个线程是主线程的话，表现出来的就是出现了卡顿。所以，如果我们要利用 RunLoop 原理来监控卡顿的话，就是要关注这三个阶段。</p>
<p>接下来，我们就一起分析一下，如何对 loop 的这两个状态进行监听，以及监控的时间值如何设置才合理。</p>
<h2 id="监控RunLoop状态检测超时"><a href="#监控RunLoop状态检测超时" class="headerlink" title="监控RunLoop状态检测超时"></a>监控RunLoop状态检测超时</h2><p>通过<code>RunLoop</code>的源码我们已经知道了主线程处理事件的时间，那么如何检测应用是否发生了卡顿呢？为了找到合理的处理方案，我们得先在项目中得到runloop的监听状态。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">void</span> runLoopObserverCallback(<span class="built_in">CFRunLoopObserverRef</span> observer, <span class="built_in">CFRunLoopActivity</span> activity, <span class="type">void</span> * info) &#123;</span><br><span class="line">    [RunloopMonitor shareInstance].currentActivity = activity;</span><br><span class="line">    dispatch_semaphore_signal([RunloopMonitor shareInstance].semphore);</span><br><span class="line">    <span class="keyword">switch</span> (activity) &#123;</span><br><span class="line">        <span class="keyword">case</span> kCFRunLoopEntry:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;runloop entry&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kCFRunLoopExit:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;runloop exit&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kCFRunLoopAfterWaiting:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;runloop after waiting&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kCFRunLoopBeforeTimers:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;runloop before timers&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kCFRunLoopBeforeSources:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;runloop before sources&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kCFRunLoopBeforeWaiting:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;runloop before waiting&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>UITableView代理代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSInteger</span>)tableView: (<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection: (<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UITableViewCell</span> *)tableView: (<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath: (<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="built_in">UITableViewCell</span> * cell = [tableView dequeueReusableCellWithIdentifier: <span class="string">@&quot;cell&quot;</span>];</span><br><span class="line">    cell.textLabel.text = [<span class="built_in">NSString</span> stringWithFormat: <span class="string">@&quot;第%lu行&quot;</span>, indexPath.row];</span><br><span class="line">    <span class="keyword">if</span> (indexPath.row &gt; <span class="number">0</span> &amp;&amp; indexPath.row % <span class="number">30</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        sleep(<span class="number">2.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)tableView: (<span class="built_in">UITableView</span> *)tableView didSelectRowAtIndexPath: (<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    sleep(<span class="number">2.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行之后输出的结果是滚动引发的<code>Sources</code>事件总是被快速的执行完成，然后进入到<code>kCFRunLoopBeforeWaiting</code>状态下。假如在滚动过程中发生了卡顿现象，那么<code>RunLoop</code>必然会保持<code>kCFRunLoopAfterWaiting</code>或者<code>kCFRunLoopBeforeSources</code>这两个状态之一。</p>
<p>为了实现卡顿的检测，首先需要注册<code>RunLoop</code>的监听回调，保存<code>RunLoop</code>状态；其次，通过创建子线程循环监听主线程<code>RunLoop</code>的状态来检测是否存在停留卡顿现象: <code>收到Sources相关的事件时，将超时阙值时间内分割成多个时间片段，重复去获取当前RunLoop的状态。如果多次处在处理事件的状态下，那么可以视作发生了卡顿现象</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">void</span>)startMonitoring &#123;</span><br><span class="line">    <span class="keyword">if</span> (_isMonitoring) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">    _isMonitoring = <span class="literal">YES</span>;</span><br><span class="line">    <span class="built_in">CFRunLoopObserverContext</span> context = &#123; <span class="number">0</span>, (__bridge <span class="type">void</span> *)<span class="keyword">self</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    _observer = <span class="built_in">CFRunLoopObserverCreate</span>(kCFAllocatorDefault, kCFRunLoopAllActivities, <span class="literal">YES</span>, <span class="number">0</span>, &amp;runLoopObserverCallback, &amp;context);</span><br><span class="line">    <span class="built_in">CFRunLoopAddObserver</span>(<span class="built_in">CFRunLoopGetMain</span>(), _observer, kCFRunLoopCommonModes);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(event_monitor_queue(), ^&#123;</span><br><span class="line">        <span class="keyword">while</span> ([RunloopMonitor shareInstance].isMonitoring) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([RunloopMonitor shareInstance].currentActivity == kCFRunLoopBeforeWaiting) &#123;</span><br><span class="line">                __block <span class="type">BOOL</span> timeOut = <span class="literal">YES</span>;</span><br><span class="line">                <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                    timeOut = <span class="literal">NO</span>;</span><br><span class="line">                    dispatch_semaphore_signal([RunloopMonitor shareInstance].eventSemphore);</span><br><span class="line">                &#125;);</span><br><span class="line">                [<span class="built_in">NSThread</span> sleepForTimeInterval: time_out_interval];</span><br><span class="line">                <span class="keyword">if</span> (timeOut) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                dispatch_wait([RunloopMonitor shareInstance].eventSemphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(fluecy_monitor_queue(), ^&#123;</span><br><span class="line">        <span class="keyword">while</span> ([RunloopMonitor shareInstance].isMonitoring) &#123;</span><br><span class="line">            <span class="type">long</span> waitTime = dispatch_semaphore_wait(<span class="keyword">self</span>.semphore, dispatch_time(DISPATCH_TIME_NOW, wait_interval));</span><br><span class="line">            <span class="keyword">if</span> (waitTime != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (![RunloopMonitor shareInstance].observer) &#123;</span><br><span class="line">                    [RunloopMonitor shareInstance].outTime = <span class="number">0</span>;</span><br><span class="line">                    [[RunloopMonitor shareInstance] stopMonitoring];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ([RunloopMonitor shareInstance].currentActivity == kCFRunLoopBeforeSources || [RunloopMonitor shareInstance].currentActivity == kCFRunLoopAfterWaiting) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (++[RunloopMonitor shareInstance].outTime &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    [<span class="built_in">NSThread</span> sleepForTimeInterval: restore_interval];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            [RunloopMonitor shareInstance].outTime = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="标记位检测线程超时"><a href="#标记位检测线程超时" class="headerlink" title="标记位检测线程超时"></a>标记位检测线程超时</h2><p>与UI卡顿不同的事，事件处理往往是处在<code>kCFRunLoopBeforeWaiting</code>的状态下收到了<code>Sources</code>事件源，最开始笔者尝试同样以多个时间片段查询的方式处理。但是由于主线程的<code>RunLoop</code>在闲置时基本处于<code>Before Waiting</code>状态，这就导致了即便没有发生任何卡顿，这种检测方式也总能认定主线程处在卡顿状态。</p>
<p>于是github上查看了下卡顿检测第三方监测卡顿的工具，他们的卡顿监控方案大致思路为：创建一个子线程进行循环检测，每次检测时设置标记位为<code>YES</code>，然后派发任务到主线程中将标记位设置为<code>NO</code>。接着子线程沉睡超时阙值时长，判断标志位是否成功设置成<code>NO</code>。如果没有说明主线程发生了卡顿，无法处理派发任务：</p>
<p>![图片 1](图片 1.png)</p>
<h2 id="获取堆栈"><a href="#获取堆栈" class="headerlink" title="获取堆栈"></a>获取堆栈</h2><p>子线程监控发现卡顿后，还需要记录当前出现卡顿的方法堆栈信息，并适时推送到服务端供开发者分析，从而解决卡顿问题。那么，在这个过程中，如何获取卡顿的方法堆栈信息呢？</p>
<p>这里我选择了魔改<a href="https://github.com/bestswifter/BSBacktraceLogger">BSBacktraceLogger</a></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>多数开发者对于<code>RunLoop</code>可能并没有进行实际的应用开发过，或者说即便了解<code>RunLoop</code>也只是处在理论的认知上。本文仅仅是对采用runloop来进行APP卡顿的一些个人观点，有纰漏还望指出。</p>
<p><a href="https://github.com/eziochiu/RunLoopMonitor.git">Demo</a></p>
]]></content>
      <categories>
        <category>RunLoop</category>
      </categories>
      <tags>
        <tag>RunLoop</tag>
      </tags>
  </entry>
</search>
